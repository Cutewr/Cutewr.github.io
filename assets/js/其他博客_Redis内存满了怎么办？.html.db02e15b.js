"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[6255],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},9642:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>h});var e=a(641);const l=[(0,e.Fv)('<h1 id="redis内存满了怎么办" tabindex="-1"><a class="header-anchor" href="#redis内存满了怎么办"><span>Redis内存满了怎么办？</span></a></h1><p>我们知道redis是一个非常常用的内存型数据库，数据从内存中读取是它非常高效的原因之一，那么但是如果有一天，「redis分配的内存满了怎么办」？遇到这个面试题不要慌，这种问题我们分为两角度回答就可以：</p><p>「redis会怎么做」？ 「我们可以怎么做」？</p><h2 id="增加redis可用内存" tabindex="-1"><a class="header-anchor" href="#增加redis可用内存"><span>增加Redis可用内存</span></a></h2><p>报警，然后增加Redis可用内存。</p><p>这种方法很暴力，也很好用，我们直接通过增加redis的可用内存就可以了， 有两种方式</p><ol><li>「通过配置文件配置」</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//设置redis最大占用内存大小为1000M</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxmemory</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1000mb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在redis安装目录下面的redis.conf配置文件中添加以下配置设置内存大小</p><ol start="2"><li>「通过命令修改」</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//设置redis最大占用内存大小为1000M</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> maxmemory</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1000mb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>redis支持运行时通过命令动态修改内存大小，这种方法是立竿见影的。但是reids 内存总归受限于机器的内存，也不能无限制的增长，那么如果没有办法再增加 redis 的可用内存怎么办呢？</p><h2 id="内存淘汰策略" tabindex="-1"><a class="header-anchor" href="#内存淘汰策略"><span>内存淘汰策略</span></a></h2><p>实际上Redis定义了「8种内存淘汰策略」用来处理redis内存满的情况：</p><ol><li>noeviction：直接返回错误，不淘汰任何已经存在的redis键</li><li>allkeys-lru：所有的键使用lru算法进行淘汰</li><li>volatile-lru：有过期时间的使用lru算法进行淘汰</li><li>allkeys-random：随机删除redis键</li><li>volatile-random：随机删除有过期时间的redis键</li><li>volatile-ttl：删除快过期的redis键</li><li>volatile-lfu：根据lfu算法从有过期时间的键删除</li><li>allkeys-lfu：根据lfu算法从所有键删除</li></ol><p>这些内存淘汰策略都很好理解，我们着重讲解一下lru，lfu，ttl是怎么去实现的</p><h3 id="lru的最佳实践" tabindex="-1"><a class="header-anchor" href="#lru的最佳实践"><span>LRU的最佳实践</span></a></h3><p>lru是Least Recently Used的缩写,也就是「最近很少使用」,也可以理解成最久没有使用。最近刚刚使用过的，后面接着会用到的概率也就越大。由于内存是非常金贵的，导致我们可以存储在缓存当中的数据是有限的。比如说我们固定只能存储1w条，当内存满了之后，缓存每插入一条新数据，都要抛弃一条最长没有使用的旧数据。我们把上面的内容整理一下，可以得到几点要求：</p><p>「1.保证其的读写效率，比如读写的复杂度都是O(1)」</p><p>「2.当一条数据被读取，将它最近使用的时间更新」</p><p>「3.当插入一条新数据的时候，删除最久没有使用过的数据」</p><p>所以我们要尽可能的保证查询效率很高，插入效率很高，我们知道如果只考虑查询效率，那么hash表可能就是最优的选择，如果只考虑插入效率，那么链表必定有它的一席之地。</p><p>但是这两种数据结构单独使用，都有它的弊端，那么说，有没有一种数据结构，既能够保证查询效率，又能够保证插入效率呢？于是 hash+链表这种结构出现了。</p><figure><img src="https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/6461kop4s2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>hash表用来查询在链表中的数据位置，链表负责数据的插入 当新数据插入到链表头部时有两种情况；</p><ol><li>当链表满的时候，将链表尾部的数据丢弃。这个比较简单，直接将链表尾部指针抹去，并且清除对应hash中的信息就好了。</li><li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部；这种情况我们发现，如果命中到链表中间节点，我们需要做的是 <ol><li>将该节点移到头节点；</li><li>「将该节点的上一个节点的下一个节点，设置为该节点的下一个节点」，这里就会有一个问题，我们无法找到该节点的上一个节点，因为是单向链表，所以，新的模型产生了。</li></ol></li></ol><p>这时双向链表的作用也提现出来了。能直接定位到父节点。这效率就很高了。而且由于双向链表有尾指针，所以剔除最后的尾节点也十分方便，快捷。</p><p>所以最终的解决方案就是采用「哈希表+双向链表」的结构</p><h3 id="lfu的最佳实践" tabindex="-1"><a class="header-anchor" href="#lfu的最佳实践"><span>LFU的最佳实践</span></a></h3><p>LFU:Least Frequently Used，最不经常使用策略,在一段时间内,数据被「使用频次最少」的,优先被淘汰。</p><p>最少使用（LFU）是一种用于管理计算机内存的缓存算法。主要是记录和追踪内存块的使用次数,当缓存已满并且需要更多空间时，系统将以最低内存块使用频率清除内存。采用LFU算法的最简单方法是为每个加载到缓存的块分配一个计数器。每次引用该块时，计数器将增加一。当缓存达到容量并有一个新的内存块等待插入时，系统将搜索计数器最低的块并将其从缓存中删除。</p><p>这里我们提出一种达到 O(1) 时间复杂度的 LFU 实现方案，它支持的操作包括插入、访问以及删除</p><p>如图：</p><figure><img src="https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/wr6qxra8w2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由两个双向链表+哈希表组成，上方的双向链表用来计数，下方的双向链表用来记录存储的数据，该链表的头节点存储了数字，哈希表的value对象记录下方双向链表的数据 我们这里按照插入的流程走一遍:</p><ul><li><p>将需要存储的数据插入</p></li><li><p>在hash表中「存在」，找到对应的下方双向链表，将该节点的上一个节点和该节点的下一个节点相连（这里可能只有自己，直接移除就好），然后判断自己所在上方双向链表的计数是否比当前计数大1</p><ul><li>「如果是」，则将自己移到该上方双向链表，并且「判断该双向链表下是否还有元素」，如果没有，则要删除该节点</li><li>「如果不是或者该上方双向列表无下个节点」则新加节点，将计数设为当前计数+1</li></ul></li><li><p>在hash表「不存在」，将数据存入hash表，将数据与双向链表的头节点相连（这里有可能链表未初始化）</p></li></ul><p>这样当查找，插入时效率都为O(1)</p><h2 id="redis中的过期时间是怎么实现的" tabindex="-1"><a class="header-anchor" href="#redis中的过期时间是怎么实现的"><span>Redis中的过期时间是怎么实现的？</span></a></h2><h3 id="ttl存储的数据结构" tabindex="-1"><a class="header-anchor" href="#ttl存储的数据结构"><span>TTL存储的数据结构</span></a></h3><p>redis针对TTL时间有专门的dict进行存储，就是redisDb中的dict *expires字段，dict顾名思义就是一个hashtable，key为对应的rediskey，value为对应的TTL时间。dict的数据结构中含有2个dictht对象，主要是为了解决hash冲突过程中重新hash数据使用。</p><figure><img src="https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/2spam07fv9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/ebj9vvwbzj.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/fsts5texzr.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="ttl-设置过期时间" tabindex="-1"><a class="header-anchor" href="#ttl-设置过期时间"><span>TTL 设置过期时间</span></a></h3><p>TTL设置key过期时间的方法主要是下面4个：</p><ul><li>expire 按照相对时间且以秒为单位的过期策略</li><li>expireat 按照绝对时间且以秒为单位的过期策略</li><li>pexpire 按照相对时间且以毫秒为单位的过期策略</li><li>pexpireat 按照绝对时间且以毫秒为单位的过期策略</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;expire&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,expireCommand,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;w&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;expireat&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,expireatCommand,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;w&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pexpire&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,pexpireCommand,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;w&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pexpireat&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,pexpireatCommand,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;w&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>expire expireat pexpire pexpireat 从实际设置过期时间的实现函数来看，相对时间的策略会有一个当前时间作为基准时间，绝对时间的策略会「以0作为一个基准时间」。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> expireCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">redisClient </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    expireGenericCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mstime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),UNIT_SECONDS);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> expireatCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">redisClient </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    expireGenericCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,UNIT_SECONDS);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pexpireCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">redisClient </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    expireGenericCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mstime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),UNIT_MILLISECONDS);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pexpireatCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">redisClient </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    expireGenericCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,UNIT_MILLISECONDS);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，整个过期时间最后都会换算到绝对时间进行存储，通过公式基准时间+过期时间来进行计算。对于相对时间而言基准时间就是当前时间，对于绝对时间而言相对时间就是0。设置过期时间是通过setExpire方法保存到 dict *expires对象当中。中途考虑设置的过期时间是否已经过期，如果已经过期那么在master就会删除该数据并同步删除动作到slave。</p><h2 id="redis什么时候执行淘汰策略" tabindex="-1"><a class="header-anchor" href="#redis什么时候执行淘汰策略"><span>Redis什么时候执行淘汰策略？</span></a></h2><p>在redis种有三种删除的操作此策略</p><ul><li>定时删除：对于设有过期时间的key，时间到了，定时器任务立即执行删除 因为要维护一个定时器，所以就会占用cpu资源，尤其是有过期时间的redis键越来越多损耗的性能就会线性上升。</li><li>惰性删除：每次只有再访问key的时候，才会检查key的过期时间，若是已经过期了就执行删除。 这种情况只有在访问的时候才会删除，所以有可能有些过期的redis键一直不会被访问，就会一直占用redis内存</li><li>定期删除：每隔一段时间，就会检查删除掉过期的key。 这种方案相当于上述两种方案的折中，通过最合理控制删除的时间间隔来删除key，减少对cpu的资源的占用消耗，使删除操作合理化。</li></ul>',53)],n={},t=(0,a(6262).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,l)}]]),h=JSON.parse('{"path":"/%E5%85%B6%E4%BB%96%E5%8D%9A%E5%AE%A2/Redis%E5%86%85%E5%AD%98%E6%BB%A1%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F.html","title":"Redis内存满了怎么办？","lang":"zh-CN","frontmatter":{"date":"2024-09-07T00:00:00.000Z","category":["Redis"],"tag":["内存管理"],"description":"Redis内存满了怎么办？ 我们知道redis是一个非常常用的内存型数据库，数据从内存中读取是它非常高效的原因之一，那么但是如果有一天，「redis分配的内存满了怎么办」？遇到这个面试题不要慌，这种问题我们分为两角度回答就可以： 「redis会怎么做」？ 「我们可以怎么做」？ 增加Redis可用内存 报警，然后增加Redis可用内存。 这种方法很暴力，...","head":[["meta",{"property":"og:url","content":"https://cutewr.github.io/%E5%85%B6%E4%BB%96%E5%8D%9A%E5%AE%A2/Redis%E5%86%85%E5%AD%98%E6%BB%A1%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"首页"}],["meta",{"property":"og:title","content":"Redis内存满了怎么办？"}],["meta",{"property":"og:description","content":"Redis内存满了怎么办？ 我们知道redis是一个非常常用的内存型数据库，数据从内存中读取是它非常高效的原因之一，那么但是如果有一天，「redis分配的内存满了怎么办」？遇到这个面试题不要慌，这种问题我们分为两角度回答就可以： 「redis会怎么做」？ 「我们可以怎么做」？ 增加Redis可用内存 报警，然后增加Redis可用内存。 这种方法很暴力，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/6461kop4s2.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-08T07:15:17.000Z"}],["meta",{"property":"article:author","content":"Cutewr"}],["meta",{"property":"article:tag","content":"内存管理"}],["meta",{"property":"article:published_time","content":"2024-09-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-08T07:15:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis内存满了怎么办？\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/6461kop4s2.png\\",\\"https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/wr6qxra8w2.png\\",\\"https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/2spam07fv9.png\\",\\"https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/ebj9vvwbzj.png\\",\\"https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/fsts5texzr.png\\"],\\"datePublished\\":\\"2024-09-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-08T07:15:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cutewr\\",\\"url\\":\\"https://cutewr.github.io\\"}]}"]]},"headers":[{"level":2,"title":"增加Redis可用内存","slug":"增加redis可用内存","link":"#增加redis可用内存","children":[]},{"level":2,"title":"内存淘汰策略","slug":"内存淘汰策略","link":"#内存淘汰策略","children":[{"level":3,"title":"LRU的最佳实践","slug":"lru的最佳实践","link":"#lru的最佳实践","children":[]},{"level":3,"title":"LFU的最佳实践","slug":"lfu的最佳实践","link":"#lfu的最佳实践","children":[]}]},{"level":2,"title":"Redis中的过期时间是怎么实现的？","slug":"redis中的过期时间是怎么实现的","link":"#redis中的过期时间是怎么实现的","children":[{"level":3,"title":"TTL存储的数据结构","slug":"ttl存储的数据结构","link":"#ttl存储的数据结构","children":[]},{"level":3,"title":"TTL 设置过期时间","slug":"ttl-设置过期时间","link":"#ttl-设置过期时间","children":[]}]},{"level":2,"title":"Redis什么时候执行淘汰策略？","slug":"redis什么时候执行淘汰策略","link":"#redis什么时候执行淘汰策略","children":[]}],"git":{"createdTime":1725779717000,"updatedTime":1725779717000,"contributors":[{"name":"Cutewr","email":"2574303446@qq.com","commits":1}]},"readingTime":{"minutes":8.12,"words":2437},"filePathRelative":"其他博客/Redis内存满了怎么办？.md","localizedDate":"2024年9月7日","excerpt":"\\n<p>我们知道redis是一个非常常用的内存型数据库，数据从内存中读取是它非常高效的原因之一，那么但是如果有一天，「redis分配的内存满了怎么办」？遇到这个面试题不要慌，这种问题我们分为两角度回答就可以：</p>\\n<p>「redis会怎么做」？\\n「我们可以怎么做」？</p>\\n<h2>增加Redis可用内存</h2>\\n<p>报警，然后增加Redis可用内存。</p>\\n<p>这种方法很暴力，也很好用，我们直接通过增加redis的可用内存就可以了， 有两种方式</p>\\n<ol>\\n<li>「通过配置文件配置」</li>\\n</ol>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">//设置redis最大占用内存大小为1000M</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">maxmemory</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 1000mb</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);