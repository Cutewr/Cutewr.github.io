"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[3338],{6262:(e,t)=>{t.A=(e,t)=>{const n=e.__vccOpts||e;for(const[e,i]of t)n[e]=i;return n}},9666:(e,t,n)=>{n.r(t),n.d(t,{comp:()=>s,data:()=>r});var i=n(641);const a=[(0,i.Fv)('<h1 id="redis生产问题" tabindex="-1"><a class="header-anchor" href="#redis生产问题"><span>Redis生产问题</span></a></h1><h2 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透"><span>缓存穿透</span></a></h2><h3 id="_1-什么是缓存穿透" tabindex="-1"><a class="header-anchor" href="#_1-什么是缓存穿透"><span>1. 什么是缓存穿透？</span></a></h3><p>缓存穿透说简单点就是大量请求的 key 是不合理的，<strong>根本不存在于缓存中，也不存在于数据库中</strong> 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。</p><p>举个例子：某个黑客故意制造一些非法的 key 发起大量请求，导致大量请求落到数据库，结果数据库上也没有查到对应的数据。也就是说这些请求最终都落到了数据库上，对数据库造成了巨大的压力。</p><h3 id="_2-有哪些解决办法" tabindex="-1"><a class="header-anchor" href="#_2-有哪些解决办法"><span>2. 有哪些解决办法？</span></a></h3><p>最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。</p><p><strong>1）缓存无效 key</strong></p><p>如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下：<code>SET key value EX 10086</code> 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 <strong>Redis 中缓存大量无效的 key</strong> 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。</p><p><strong>2）布隆过滤器</strong></p><p>布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的 List、Map、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。理论情况下添加到集合中的元素越多，误报的可能性就越大。并且，存放在布隆过滤器的数据不容易删除。</p><figure><img src="https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/image-20240830212015547.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Bloom Filter 会使用一个较大的 bit 数组来保存所有的数据，数组中的每个元素都只占用 1 bit ，并且每个元素只能是 0 或者 1（代表 false 或者 true），这也是 Bloom Filter 节省内存的核心所在。这样来算的话，申请一个 100w 个元素的位数组只占用 1000000Bit / 8 = 125000 Byte = 125000/1024 KB ≈ 122KB 的空间。</p><figure><img src="https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/image-20240830212028590.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。</p><p>加入布隆过滤器之后的缓存处理流程图如下。</p><img src="https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/image-20240830212041167.png" alt="image-20240830212041167" style="zoom:80%;display:block;margin:auto;"><p>3）接口限流</p><p>根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采取黑名单机制，例如将异常 IP 列入黑名单。</p><p>后面提到的缓存击穿和雪崩都可以配合接口限流来解决，毕竟这些问题的关键都是有很多请求落到了数据库上造成数据库压力过大。</p><h2 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿"><span>缓存击穿</span></a></h2><h3 id="_1-什么是缓存击穿" tabindex="-1"><a class="header-anchor" href="#_1-什么是缓存击穿"><span>1）什么是缓存击穿？</span></a></h3><p>缓存击穿中，请求的 key 对应的是 <strong>热点数据</strong> ，该数据 <strong>存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期）</strong> 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。</p><img src="https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/image-20240831080354815.png" alt="image-20240831080354815" style="zoom:80%;display:block;margin:auto;"><p>举个例子：秒杀进行过程中，缓存中的某个秒杀商品的数据突然过期，这就导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成了巨大的压力。</p><h3 id="_2-有哪些解决办法-1" tabindex="-1"><a class="header-anchor" href="#_2-有哪些解决办法-1"><span>2）有哪些解决办法？</span></a></h3><ol><li><strong>永不过期</strong>（不推荐）：设置热点数据永不过期或者过期时间比较长。</li><li><strong>提前预热</strong>（推荐）：针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。</li><li>使用互斥锁，可以使用redisson的分布式锁实现，就是从redis中查询不到数据时，不要立刻去查数据库，而是先获取锁，获取到锁后再去查询数据库，而其他未获取到锁的请求进行重试，这样就可以确保只有一个查询数据库并且更新缓存的请求。</li></ol><h2 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span>缓存雪崩</span></a></h2><h3 id="_1-什么是缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_1-什么是缓存雪崩"><span>1）什么是缓存雪崩？</span></a></h3><p>大量key同时失效/redis服务器宕机，<strong>导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。</strong></p><h3 id="_2-有哪些解决办法-2" tabindex="-1"><a class="header-anchor" href="#_2-有哪些解决办法-2"><span>2）有哪些解决办法？</span></a></h3><p><strong>针对 Redis 服务不可用的情况：</strong></p><ol><li><strong>Redis 集群</strong>：采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。Redis Cluster 和 Redis Sentinel 是两种最常用的 Redis 集群实现方案。</li><li><strong>多级缓存</strong>：设置多级缓存，例如本地缓存+Redis 缓存的二级缓存组合，Redis 是需要网络开销，增加时耗。本地缓存是直接从本地内存中读取，没有网络开销。所以第一步查询先经过本地缓存，当 Redis 缓存出现问题时，还可以从本地缓存中获取到部分数据。</li></ol><p><strong>针对大量缓存同时失效的情况：</strong></p><p><strong>设置随机失效时间</strong>：为缓存设置随机的失效时间，例如在固定过期时间的基础上加上一个随机值，这样可以避免大量缓存同时到期，从而减少缓存雪崩的风险。</p><h3 id="缓存预热如何实现" tabindex="-1"><a class="header-anchor" href="#缓存预热如何实现"><span>缓存预热如何实现？</span></a></h3><p>常见的缓存预热方式有两种：</p><ol><li>使用定时任务，比如 xxl-job，来定时触发缓存预热的逻辑，将数据库中的热点数据查询出来并存入缓存中。</li><li>使用消息队列，比如 Kafka，来异步地进行缓存预热，将数据库中的热点数据的主键或者 ID 发送到消息队列中，然后由缓存服务消费消息队列中的数据，根据主键或者 ID 查询数据库并更新缓存。</li></ol><h2 id="数据库和缓存的一致性如何保证" tabindex="-1"><a class="header-anchor" href="#数据库和缓存的一致性如何保证"><span>数据库和缓存的一致性如何保证？</span></a></h2><h3 id="_1、更新数据库-删除缓存【旁路缓存策略】" tabindex="-1"><a class="header-anchor" href="#_1、更新数据库-删除缓存【旁路缓存策略】"><span>1、更新数据库，删除缓存【旁路缓存策略】</span></a></h3><p><strong>写策略的步骤：</strong></p><ul><li>更新数据库中的数据；</li><li>删除缓存中的数据。</li></ul><p><strong>读策略的步骤：</strong></p><ul><li>如果读取的数据命中了缓存，则直接返回数据；</li><li>如果读取的数据没有命中缓存，则从数据库中读取数据，然后将数据写入到缓存，并且返回给用户。</li></ul><p><strong>先删除缓存，再更新数据库，在「读 + 写」并发的时候，还是会出现缓存和数据库的数据不一致的问题</strong>。</p><p>A线程要更新，删除缓存。这个时候B线程过来读数据库，并把旧数据写入缓存中。A线程再把新数据写入数据库中。这样的话就会造成数据库和缓存状态不一致。</p><p><strong>先更新数据库，再删除缓存。</strong></p><p><strong>也会出现数据不一致的情况，A线程读取数据，先读出数据库的旧数据。这个时候B更新数据库为新数据，再删除缓存。A将读到的旧数据写回缓存。</strong></p><p><strong>但是这个情况很少发生，因为缓存的写入往往快于数据库的写入。</strong></p><h3 id="_2、更新数据库-更新缓存" tabindex="-1"><a class="header-anchor" href="#_2、更新数据库-更新缓存"><span>2、更新数据库，更新缓存</span></a></h3><p><strong>如果我们的业务对缓存命中率有很高的要求，我们可以采用「更新数据库 + 更新缓存」的方案，因为更新缓存并不会出现缓存未命中的情况</strong>。</p><p><strong>无论是「先更新数据库，再更新缓存」，还是「先更新缓存，再更新数据库」，<strong>这两个方案都存在并发问题，当</strong>两个请求并发更新</strong>同一条数据的时候，可能会出现缓存和数据库中的数据不一致的现象。因为更新数据库和更新缓存这两个操作是独立的，而我们又没有对操作做任何并发控制，那么当两个线程并发更新它们的话，就会因为写入顺序的不同造成数据的不一致。</p><p>所以我们得增加一些手段来解决这个问题，这里提供两种做法：</p><ul><li>在更新缓存前先加个<strong>分布式锁</strong>，保证同一时间只运行一个请求更新数据，就会不会产生并发问题了，当然引入了锁后，对于写入的性能就会带来影响。</li><li>在更新完缓存时，给缓存加上较短的<strong>过期时间</strong>，这样即时出现缓存不一致的情况，缓存的数据也会很快过期，对业务还是能接受的。</li></ul><h3 id="_3、删除缓存时候失败了怎么办" tabindex="-1"><a class="header-anchor" href="#_3、删除缓存时候失败了怎么办"><span>3、删除缓存时候失败了怎么办？</span></a></h3><h4 id="_1、重试机制" tabindex="-1"><a class="header-anchor" href="#_1、重试机制"><span>1、重试机制</span></a></h4><p>我们可以引入<strong>消息队列</strong>，将删除缓存要操作的数据加入到消息队列，由消费者来操作数据。</p><ul><li>如果应用<strong>删除缓存失败</strong>，可以从消息队列中重新读取数据，然后再次删除缓存，这个就是<strong>重试机制</strong>。当然，如果重试超过的一定次数，还是没有成功，我们就需要向业务层发送报错信息了。</li><li>如果<strong>删除缓存成功</strong>，就要把数据从消息队列中移除，避免重复操作，否则就继续重试。</li></ul><h2 id="_2、订阅-mysql-binlog-再操作缓存" tabindex="-1"><a class="header-anchor" href="#_2、订阅-mysql-binlog-再操作缓存"><span>2、订阅 MySQL binlog，再操作缓存</span></a></h2><p>「<strong>先更新数据库，再删缓存</strong>」的策略的第一步是更新数据库，那么更新数据库成功，就会产生一条变更日志，记录在 binlog 里。</p><p>于是我们就可以通过订阅 binlog 日志，拿到具体要操作的数据，然后再执行缓存删除，阿里巴巴开源的 Canal 中间件就是基于这个实现的。</p><p>Canal 模拟 MySQL 主从复制的交互协议，把自己伪装成一个 MySQL 的从节点，向 MySQL 主节点发送 dump 请求，MySQL 收到请求后，就会开始推送 Binlog 给 Canal，Canal 解析 Binlog 字节流之后，转换为便于读取的结构化数据，供下游程序订阅使用。</p><p>下图是 Canal 的工作原理：</p><figure><img src="https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/image-20240831080815071.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以，<strong>如果要想保证「先更新数据库，再删缓存」策略第二个操作能执行成功，我们可以使用「消息队列来重试缓存的删除」，或者「订阅 MySQL binlog 再操作缓存」，这两种方法有一个共同的特点，都是采用异步操作缓存。</strong></p>',65)],l={},s=(0,n(6262).A)(l,[["render",function(e,t){return(0,i.uX)(),(0,i.CE)("div",null,a)}]]),r=JSON.parse('{"path":"/DataBase/Redis/RedisProblem.html","title":"Redis生产问题","lang":"zh-CN","frontmatter":{"date":"2024-08-30T00:00:00.000Z","category":["数据库"],"tag":["Redis"],"description":"Redis生产问题 缓存穿透 1. 什么是缓存穿透？ 缓存穿透说简单点就是大量请求的 key 是不合理的，根本不存在于缓存中，也不存在于数据库中 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。 举个例子：某个黑客故意制造一些非法的 key 发起大量请求，导致大量请求落到数据库，结果...","head":[["meta",{"property":"og:url","content":"https://cutewr.github.io/DataBase/Redis/RedisProblem.html"}],["meta",{"property":"og:site_name","content":"首页"}],["meta",{"property":"og:title","content":"Redis生产问题"}],["meta",{"property":"og:description","content":"Redis生产问题 缓存穿透 1. 什么是缓存穿透？ 缓存穿透说简单点就是大量请求的 key 是不合理的，根本不存在于缓存中，也不存在于数据库中 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。 举个例子：某个黑客故意制造一些非法的 key 发起大量请求，导致大量请求落到数据库，结果..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/image-20240830212015547.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T00:18:55.000Z"}],["meta",{"property":"article:author","content":"Cutewr"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2024-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-31T00:18:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis生产问题\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/image-20240830212015547.png\\",\\"https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/image-20240830212028590.png\\",\\"https://cdn.jsdelivr.net/gh/Cutewr/blogimage@main/img/image-20240831080815071.png\\"],\\"datePublished\\":\\"2024-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-31T00:18:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cutewr\\",\\"url\\":\\"https://cutewr.github.io\\"}]}"]]},"headers":[{"level":2,"title":"缓存穿透","slug":"缓存穿透","link":"#缓存穿透","children":[{"level":3,"title":"1. 什么是缓存穿透？","slug":"_1-什么是缓存穿透","link":"#_1-什么是缓存穿透","children":[]},{"level":3,"title":"2. 有哪些解决办法？","slug":"_2-有哪些解决办法","link":"#_2-有哪些解决办法","children":[]}]},{"level":2,"title":"缓存击穿","slug":"缓存击穿","link":"#缓存击穿","children":[{"level":3,"title":"1）什么是缓存击穿？","slug":"_1-什么是缓存击穿","link":"#_1-什么是缓存击穿","children":[]},{"level":3,"title":"2）有哪些解决办法？","slug":"_2-有哪些解决办法-1","link":"#_2-有哪些解决办法-1","children":[]}]},{"level":2,"title":"缓存雪崩","slug":"缓存雪崩","link":"#缓存雪崩","children":[{"level":3,"title":"1）什么是缓存雪崩？","slug":"_1-什么是缓存雪崩","link":"#_1-什么是缓存雪崩","children":[]},{"level":3,"title":"2）有哪些解决办法？","slug":"_2-有哪些解决办法-2","link":"#_2-有哪些解决办法-2","children":[]},{"level":3,"title":"缓存预热如何实现？","slug":"缓存预热如何实现","link":"#缓存预热如何实现","children":[]}]},{"level":2,"title":"数据库和缓存的一致性如何保证？","slug":"数据库和缓存的一致性如何保证","link":"#数据库和缓存的一致性如何保证","children":[{"level":3,"title":"1、更新数据库，删除缓存【旁路缓存策略】","slug":"_1、更新数据库-删除缓存【旁路缓存策略】","link":"#_1、更新数据库-删除缓存【旁路缓存策略】","children":[]},{"level":3,"title":"2、更新数据库，更新缓存","slug":"_2、更新数据库-更新缓存","link":"#_2、更新数据库-更新缓存","children":[]},{"level":3,"title":"3、删除缓存时候失败了怎么办？","slug":"_3、删除缓存时候失败了怎么办","link":"#_3、删除缓存时候失败了怎么办","children":[]}]},{"level":2,"title":"2、订阅 MySQL binlog，再操作缓存","slug":"_2、订阅-mysql-binlog-再操作缓存","link":"#_2、订阅-mysql-binlog-再操作缓存","children":[]}],"git":{"createdTime":1725063535000,"updatedTime":1725063535000,"contributors":[{"name":"Cutewr","email":"2574303446@qq.com","commits":1}]},"readingTime":{"minutes":9.75,"words":2925},"filePathRelative":"DataBase/Redis/RedisProblem.md","localizedDate":"2024年8月30日","excerpt":"\\n<h2>缓存穿透</h2>\\n<h3>1. 什么是缓存穿透？</h3>\\n<p>缓存穿透说简单点就是大量请求的 key 是不合理的，<strong>根本不存在于缓存中，也不存在于数据库中</strong> 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。</p>\\n<p>举个例子：某个黑客故意制造一些非法的 key 发起大量请求，导致大量请求落到数据库，结果数据库上也没有查到对应的数据。也就是说这些请求最终都落到了数据库上，对数据库造成了巨大的压力。</p>\\n<h3>2. 有哪些解决办法？</h3>\\n<p>最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。</p>","autoDesc":true}')}}]);