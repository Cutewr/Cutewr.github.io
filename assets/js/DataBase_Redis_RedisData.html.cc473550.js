"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[8453],{6262:(s,i)=>{i.A=(s,i)=>{const n=s.__vccOpts||s;for(const[s,e]of i)n[s]=e;return n}},4958:(s,i,n)=>{n.r(i),n.d(i,{comp:()=>p,data:()=>d});var e=n(641);const a=[(0,e.Fv)('<h1 id="redis数据类型" tabindex="-1"><a class="header-anchor" href="#redis数据类型"><span>Redis数据类型</span></a></h1><h2 id="redis-常用的数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#redis-常用的数据类型有哪些"><span><strong>Redis 常用的数据类型有哪些？</strong></span></a></h2><p>Redis 中比较常见的数据类型有下面这些：</p><ul><li><strong>5 种基础数据类型</strong>：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</li><li><strong>3 种特殊数据类型</strong>：HyperLogLog（基数统计）、Bitmap （位图）、Geospatial (地理位置)。</li></ul><p>除了上面提到的之外，还有一些其他的比如 Bloom filter（布隆过滤器）、Bitfield（位域）。</p><h2 id="string-字符串" tabindex="-1"><a class="header-anchor" href="#string-字符串"><span><strong>String（字符串）</strong></span></a></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>String 是 Redis 中最简单同时也是最常用的一个数据类型。不仅可以保存字符串，还可以保存数值数据，而且还是二进制安全的。</p><h3 id="底层实现" tabindex="-1"><a class="header-anchor" href="#底层实现"><span>底层实现</span></a></h3><p>虽然 Redis 是用 C 语言写的，但是 Redis 并没有使用 C 的字符串表示，而是自己构建了一种 <strong>简单动态字符串</strong>（Simple Dynamic String，<strong>SDS</strong>）。相比于 C 的原生字符串，Redis 的 SDS 不光可以保存可以用来存储任何类型的数据而且还是二进制安全的，并且获取字符串长度复杂度为 O(1)（C 字符串为 O(N)）,除此之外，Redis 的 SDS API 是安全的，不会造成缓冲区溢出。</p><p>SDS 相比于 C 语言中的字符串有如下提升：</p><ol><li>**二进制安全：**C 语言中的字符串以空字符 <code>\\0</code> 作为字符串结束的标识，这存在一些问题，像一些二进制文件（比如图片、视频、音频）就可能包括“\\0”，C 字符串无法正确保存。SDS 使用 len 属性判断字符串是否结束，不存在这个问题。</li><li><strong>可以避免缓冲区溢出</strong>：C 语言中的字符串被修改（比如拼接）时，一旦没有分配足够长度的内存空间，就会造成缓冲区溢出。SDS 结构中会先根据alloc-len检查空间大小是否满足要求，如果不满足，则先扩展至所需大小再进行修改操作。(⼩于1MB翻倍扩容，⼤于1MB按1MB扩容）</li><li><strong>获取字符串长度的复杂度较低</strong>：C 语言中的字符串的长度通常是经过遍历计数来实现的，时间复杂度为 O(n)。SDS 的长度获取直接读取 len 属性即可，时间复杂度为 O(1)。</li><li><strong>减少内存分配次数</strong>：为了避免修改（增加/减少）字符串时，每次都需要重新分配内存（C 语言的字符串是这样的），SDS 实现了空间预分配和惰性空间释放两种优化策略。当 SDS 需要增加字符串时，Redis 会为 SDS 分配好内存，并且根据特定的算法分配多余的内存，这样可以减少连续执行字符串增长操作所需的内存重分配次数。当 SDS 需要减少字符串时，这部分内存不会立即被回收，会被记录下来，等待后续使用（支持手动释放，有对应的 API）。</li></ol><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h3><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>SET key value</td><td>设置指定 key 的值</td></tr><tr><td>SETNX key value</td><td>只有在 key 不存在时设置 key 的值</td></tr><tr><td>GET key</td><td>获取指定 key 的值</td></tr><tr><td>MSET key1 value1 key2 value2 ……</td><td>批量设置一个或多个指定 key 的值</td></tr><tr><td>MGET key1 key2 ...</td><td>批量获取一个或多个指定 key 的值</td></tr><tr><td>STRLEN key</td><td>返回 key 所储存的字符串值的长度</td></tr><tr><td>INCR key</td><td>将 key 中储存的数字值增一</td></tr><tr><td>DECR key</td><td>将 key 中储存的数字值减一</td></tr><tr><td>EXISTS key</td><td>判断指定 key 是否存在</td></tr><tr><td>DEL key（通用）</td><td>删除指定的 key</td></tr><tr><td>EXPIRE key seconds（通用）</td><td>给指定 key 设置过期时间</td></tr></tbody></table><p><strong>计数器（字符串的内容为整数的时候可以使用）：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; SET number 1</span></span>\n<span class="line"><span>OK</span></span>\n<span class="line"><span>&gt; INCR number # 将 key 中储存的数字值增一</span></span>\n<span class="line"><span>(integer) 2</span></span>\n<span class="line"><span>&gt; GET number</span></span>\n<span class="line"><span>&quot;2&quot;</span></span>\n<span class="line"><span>&gt; DECR number # 将 key 中储存的数字值减一</span></span>\n<span class="line"><span>(integer) 1</span></span>\n<span class="line"><span>&gt; GET number</span></span>\n<span class="line"><span>&quot;1&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置过期时间（默认为永不过期）</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; EXPIRE key 60</span></span>\n<span class="line"><span>(integer) 1</span></span>\n<span class="line"><span>&gt; SETEX key 60 value # 设置值并设置过期时间</span></span>\n<span class="line"><span>OK</span></span>\n<span class="line"><span>&gt; TTL key</span></span>\n<span class="line"><span>(integer) 56</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><h4 id="缓存对象" tabindex="-1"><a class="header-anchor" href="#缓存对象"><span>缓存对象</span></a></h4><pre><code>使用 String 来缓存对象有两种方式：\n\n- 直接缓存整个对象的 JSON，命令例子： `SET user:1 &#39;{&quot;name&quot;:&quot;xiaolin&quot;, &quot;age&quot;:18}&#39;`。或者缓存对象序列化后的值。\n- 采用将 key 进行分离为 user:ID:属性，采用 MSET 存储，用 MGET 获取各属性值，命令例子： `MSET user:1:name xiaolin user:1:age 18 user:2:name xiaomei user:2:age 20`。\n</code></pre><h4 id="需要计数的场景" tabindex="-1"><a class="header-anchor" href="#需要计数的场景"><span><strong>需要计数的场景</strong></span></a></h4><ul><li>优点：Redis 处理命令是单线程，所以计数过程是原子的</li><li>举例：计算访问次数、点赞、转发、库存数量等等。</li><li>相关命令：<code>SET</code>、<code>GET</code>、 <code>INCR</code>、<code>DECR</code> 。</li></ul><h4 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁"><span><strong>分布式锁</strong></span></a></h4><p>利用 <code>SETNX key value</code> 命令可以实现一个最简易的分布式锁（存在一些缺陷，通常不建议这样实现分布式锁）。</p><p>一般情况下，会对分布式锁加上过期时间，避免无法释放锁。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SET lock_key unique_value NX PX 10000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>lock_key 就是 key 键；</li><li>unique_value 是客户端生成的唯一的标识；</li><li>NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作；</li><li>PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁。</li></ul><h4 id="共享session信息" tabindex="-1"><a class="header-anchor" href="#共享session信息"><span><strong>共享Session信息</strong></span></a></h4><p>开发的时候，会使用 Session 来保存用户的会话状态，Session信息会被保存在服务器端，但这只适用于单系统应用，如果在分布式系统中，用户每次请求分配的服务器不一致，就会出现需要重复登录的问题。</p><p>所以可以使用Redis 对这些 Session 信息进行统一的存储和管理，这样无论请求发送到那台服务器，服务器都会去同一个 Redis 获取相关的 Session 信息，这样就解决了分布式系统下 Session 存储的问题。</p><p>分布式系统使用同一个 Redis 存储 Session 流程图：</p><figure><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/3e894961-3173-4702-91a3-da175d94f68d/50ebe537-6854-478d-a6fa-a64fe4b05c31/image-20240724183403638.png" alt="image-20240724183403638.png" tabindex="0" loading="lazy"><figcaption>image-20240724183403638.png</figcaption></figure><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span><strong>List</strong></span></a></h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p>List是一个有序列表，按照插入顺序和插入方式排序，可以从头部或尾部向 List 列表添加元素。列表的最大长度为 <code>2^32 - 1</code>，也即每个列表支持超过 <code>40 亿</code>个元素。</p><h3 id="底层实现-1" tabindex="-1"><a class="header-anchor" href="#底层实现-1"><span>底层实现</span></a></h3><p>List 类型的底层数据结构是由<strong>双向链表或压缩列表</strong>实现的：</p><ul><li>如果列表的元素个数小于 <code>512</code> 个（默认值，可由 <code>list-max-ziplist-entries</code> 配置），列表每个元素的值都小于 <code>64</code> 字节（默认值，可由 <code>list-max-ziplist-value</code> 配置），Redis 会使用<strong>压缩列表</strong>作为 List 类型的底层数据结构；</li><li>如果列表的元素不满足上面的条件，Redis 会使用<strong>双向链表</strong>作为 List 类型的底层数据结构；</li></ul><p>但是<strong>在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了</strong>。</p><h3 id="常用命令-1" tabindex="-1"><a class="header-anchor" href="#常用命令-1"><span>常用命令</span></a></h3><p><strong>通过</strong> <code>RPUSH/LPOP</code> <strong>或者</strong> <code>LPUSH/RPOP</code><strong>实现队列</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; RPUSH myList value1</span></span>\n<span class="line"><span>(integer) 1</span></span>\n<span class="line"><span>&gt; RPUSH myList value2 value3</span></span>\n<span class="line"><span>(integer) 3</span></span>\n<span class="line"><span>&gt; LPOP myList</span></span>\n<span class="line"><span>&quot;value1&quot;</span></span>\n<span class="line"><span>&gt; LRANGE myList 0 1</span></span>\n<span class="line"><span>1) &quot;value2&quot;</span></span>\n<span class="line"><span>2) &quot;value3&quot;</span></span>\n<span class="line"><span>&gt; LRANGE myList 0 -1</span></span>\n<span class="line"><span>1) &quot;value2&quot;</span></span>\n<span class="line"><span>2) &quot;value3&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过</strong> <code>RPUSH/RPOP</code><strong>或者</strong><code>LPUSH/LPOP</code> <strong>实现栈</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; RPUSH myList2 value1 value2 value3</span></span>\n<span class="line"><span>(integer) 3</span></span>\n<span class="line"><span>&gt; RPOP myList2 # 将 list的最右边的元素取出</span></span>\n<span class="line"><span>&quot;value3&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过</strong> <code>LRANGE</code> <strong>查看对应下标范围的列表元素</strong>。通过 <code>LRANGE</code> 命令，你可以基于 List 实现分页查询。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; RPUSH myList value1 value2 value3</span></span>\n<span class="line"><span>(integer) 3</span></span>\n<span class="line"><span>&gt; LRANGE myList 0 1</span></span>\n<span class="line"><span>1) &quot;value1&quot;</span></span>\n<span class="line"><span>2) &quot;value2&quot;</span></span>\n<span class="line"><span>&gt; LRANGE myList 0 -1</span></span>\n<span class="line"><span>1) &quot;value1&quot;</span></span>\n<span class="line"><span>2) &quot;value2&quot;</span></span>\n<span class="line"><span>3) &quot;value3&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过</strong> <code>LLEN</code> <strong>查看链表长度</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; LLEN myList</span></span>\n<span class="line"><span>(integer) 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1"><span>应用场景</span></a></h3><h4 id="信息流展示" tabindex="-1"><a class="header-anchor" href="#信息流展示"><span><strong>信息流展示</strong></span></a></h4><ul><li>举例：最新文章、最新动态。</li><li>相关命令：<code>LPUSH</code>、<code>LRANGE</code>。</li></ul><h4 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span><strong>消息队列</strong></span></a></h4><p>消息队列必须要满足三个需求，分别是<strong>消息有序、处理重复的消息和保证消息可靠性</strong>。</p><p><strong>1、首先满足消息有序</strong>，List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列。</p><p>不过，在消费者读取数据时，有一个性能风险点。List 并不会主动地通知消费者有新消息，如果消费者想要及时处理消息，就需要在程序中不停地调用<code>RPOP</code>命令（比如使用一个while(1)循环）。造成消费者程序的 CPU资源消耗。</p><p>为了解决这个问题，Redis提供了 BRPOP 命令。BRPOP命令也称为阻塞式读取，客户端在没有读到队列数据时，自动阻塞，直到有新的数据写入队列，再开始读取新数据，这种方式能节省CPU开销。</p><p><strong>2、处理重复的消息</strong></p><ul><li>每个消息都有一个全局的 ID。</li><li>消费者要记录已经处理过的消息的 ID。当收到一条消息后，消费者程序就可以对比收到的消息 ID 和记录的已处理过的消息 ID，来判断当前收到的消息有没有经过处理。如果已经处理过，那么，消费者程序就不再进行处理了。</li></ul><p>但是 <strong>List 并不会为每个消息生成 ID 号，所以我们需要自行为每个消息的key加上一个全局唯一ID</strong>，生成之后，我们在用 LPUSH 命令把消息插入 List 时，需要在消息中包含这个全局唯一 ID。</p><p>例如，我们执行以下命令，就把一条全局 ID 为 111000102、库存量为 99 的消息插入了消息队列：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; LPUSH mq &quot;111000102:stock:99&quot;</span></span>\n<span class="line"><span>(integer) 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、保证消息可靠性</strong></p><p>当消费者程序从 List 中读取一条消息后，List 就不会再留存这条消息了。所以，如果消费者程序在处理消息的过程出现了故障或宕机，就会导致消息没有处理完成，那么，消费者程序再次启动后，就无法再次从原来的List中读取消息。</p><p>为了留存消息，List 类型提供了 <code>BRPOPLPUSH</code> 命令，这个命令的作用是<strong>让消费者程序从一个 List 中读取消息，同时，Redis 会把这个消息再插入到另一个 List（可以叫作备份 List）留存</strong>。</p><p>这样一来，如果消费者程序读了消息但没能正常处理，等它重启后，就可以从备份 List 中重新读取消息了。</p><blockquote><p>总结</p><p>基于 List 类型的消息队列，满足消息队列的三大需求（消息保序、处理重复的消息和保证消息可靠性）。</p><ul><li>消息保序：使用 LPUSH + RPOP；</li><li>阻塞读取：使用 BRPOP；</li><li>重复消息处理：生产者自行实现全局唯一 ID；</li><li>消息的可靠性：使用 BRPOPLPUSH</li></ul></blockquote><blockquote><p>List 作为消息队列有什么缺陷？</p><p><strong>List 不支持多个消费者消费同一条消息</strong>，因为一旦消费者拉取一条消息后，这条消息就从 List 中删除了，无法被其它消费者再次消费。</p><p>要实现一条消息可以被多个消费者消费，那么就要将多个消费者组成一个消费组，使得多个消费者可以消费同一条消息，但是 <strong>List 类型并不支持消费组的实现</strong>。</p><p>这就要说起 Redis 从 5.0 版本开始提供的 Stream 数据类型了，Stream 同样能够满足消息队列的三大需求，而且它还支持「消费组」形式的消息读取。</p></blockquote><h2 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span><strong>Hash</strong></span></a></h2><h3 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1"><span>简介</span></a></h3><p>Hash 是一个键值对集合，其中 value 的形式如： <code>value=[{field1，value1}，...{fieldN，valueN}]</code>。Hash 特别适合用于存储对象。</p><h3 id="内部实现" tabindex="-1"><a class="header-anchor" href="#内部实现"><span>内部实现</span></a></h3><p>Hash 类型的底层数据结构是由<strong>压缩列表或哈希表</strong>实现的：</p><ul><li>如果哈希类型元素个数小于 <code>512</code> 个（默认值，可由 <code>hash-max-ziplist-entries</code> 配置），所有值小于 <code>64</code> 字节（默认值，可由 <code>hash-max-ziplist-value</code> 配置）的话，Redis 会使用<strong>压缩列表</strong>作为 Hash 类型的底层数据结构；</li><li>如果哈希类型元素不满足上面条件，Redis 会使用<strong>哈希表</strong>作为 Hash 类型的 底层数据结构。</li></ul><p><strong>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了</strong>。</p><h3 id="常用命令-2" tabindex="-1"><a class="header-anchor" href="#常用命令-2"><span>常用命令</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 存储一个哈希表key的键值</span></span>\n<span class="line"><span>HSET key field value</span></span>\n<span class="line"><span># 获取哈希表key对应的field键值</span></span>\n<span class="line"><span>HGET key field</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 在一个哈希表key中存储多个键值对</span></span>\n<span class="line"><span>HMSET key field value [field value...]</span></span>\n<span class="line"><span># 批量获取哈希表key中多个field键值</span></span>\n<span class="line"><span>HMGET key field [field ...]</span></span>\n<span class="line"><span># 删除哈希表key中的field键值</span></span>\n<span class="line"><span>HDEL key field [field ...]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 返回哈希表key中field的数量</span></span>\n<span class="line"><span>HLEN key</span></span>\n<span class="line"><span># 返回哈希表key中所有的键值</span></span>\n<span class="line"><span>HGETALL key</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 为哈希表key中field键的值加上增量n</span></span>\n<span class="line"><span>HINCRBY key field n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2"><span>应用场景</span></a></h3><ol><li>缓存对象</li></ol><p>Hash 类型的（key，field，value）的结构与对象的（对象id， 属性， 值）的结构相似，所以我们可以用Hash数据类型来缓存对象</p><p>我们以用户信息为例，它在关系型数据库中的结构是这样的：</p><p>我们可以使用如下命令，将用户对象的信息存储到 Hash 类型：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 存储一个哈希表uid:1的键值</span></span>\n<span class="line"><span>&gt; HMSET uid:1 name Tom age 15</span></span>\n<span class="line"><span>2</span></span>\n<span class="line"><span># 存储一个哈希表uid:2的键值</span></span>\n<span class="line"><span>&gt; HMSET uid:2 name Jerry age 13</span></span>\n<span class="line"><span>2</span></span>\n<span class="line"><span># 获取哈希表用户id为1中所有的键值</span></span>\n<span class="line"><span>&gt; HGETALL uid:1</span></span>\n<span class="line"><span>1) &quot;name&quot;</span></span>\n<span class="line"><span>2) &quot;Tom&quot;</span></span>\n<span class="line"><span>3) &quot;age&quot;</span></span>\n<span class="line"><span>4) &quot;15&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了节省空间，一般还是采用String+JSON的方式来存储对象，对象中某些频繁变化的属性可以考虑抽出来用 Hash 类型存储。</p><ol><li>购物车信息</li></ol><p>以用户 id 为 key，商品 id 为 field，商品数量为 value，恰好构成了购物车的3个要素，如下图所示。</p><p>涉及的命令如下：</p><ul><li>添加商品：<code>HSET cart:{用户id} {商品id} 1</code></li><li>添加数量：<code>HINCRBY cart:{用户id} {商品id} 1</code></li><li>商品总数：<code>HLEN cart:{用户id}</code></li><li>删除商品：<code>HDEL cart:{用户id} {商品id}</code></li><li>获取购物车所有商品：<code>HGETALL cart:{用户id}</code></li></ul><p>当前仅仅是将商品ID存储到了Redis 中，在回显商品具体信息的时候，还需要拿着商品 id 查询一次数据库，获取完整的商品的信息</p><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span><strong>Set</strong></span></a></h2><h3 id="简介-2" tabindex="-1"><a class="header-anchor" href="#简介-2"><span>简介</span></a></h3><p>Set 类型是一个无序并唯一的集合。一个集合最多可以存储 <code>2^32-1</code> 个元素。 Set 类型支持多个集合取交集、并集、差集。</p><p>Set 类型和 List 类型的区别如下：</p><ul><li>List 可以存储重复元素，Set 只能存储非重复元素；</li><li>List 中元素是有序的，而 Set是无序的。</li></ul><h3 id="内部实现-1" tabindex="-1"><a class="header-anchor" href="#内部实现-1"><span>内部实现</span></a></h3><p>Set 类型的底层数据结构是由<strong>哈希表或整数集合</strong>实现的：</p><ul><li>如果集合中的元素都是整数且元素个数小于 <code>512</code> （默认值，<code>set-maxintset-entries</code>配置）个，Redis 会使用<strong>整数集合</strong>作为 Set 类型的底层数据结构；</li><li>如果集合中的元素不满足上面条件，则 Redis 使用<strong>哈希表</strong>作为 Set 类型的底层数据结构。</li></ul><h3 id="常用命令-3" tabindex="-1"><a class="header-anchor" href="#常用命令-3"><span>常用命令</span></a></h3><ol><li>常用操作</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 往集合key中存入元素，元素存在则忽略，若key不存在则新建</span></span>\n<span class="line"><span>SADD key member [member ...]</span></span>\n<span class="line"><span># 从集合key中删除元素</span></span>\n<span class="line"><span>SREM key member [member ...]</span></span>\n<span class="line"><span># 获取集合key中所有元素</span></span>\n<span class="line"><span>SMEMBERS key</span></span>\n<span class="line"><span># 获取集合key中的元素个数</span></span>\n<span class="line"><span>SCARD key</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 判断member元素是否存在于集合key中</span></span>\n<span class="line"><span>SISMEMBER key member</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 从集合key中随机选出count个元素，元素不从key中删除</span></span>\n<span class="line"><span>SRANDMEMBER key [count]</span></span>\n<span class="line"><span># 从集合key中随机选出count个元素，元素从key中删除</span></span>\n<span class="line"><span>SPOP key [count]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>集合运算操作</li></ol><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 交集运算</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">SINTER</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 将交集结果存入新集合destination中</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">SINTERSTORE</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> destination</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 并集运算</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">SUNION</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 将并集结果存入新集合destination中</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">SUNIONSTORE</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> destination</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 差集运算</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">SDIFF</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 将差集结果存入新集合destination中</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">SDIFFSTORE</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> destination</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><p>Set 类型比较适合用来数据去重和保障数据的唯一性，还可以用来统计多个集合的交集、错集和并集等。</p><p>但是要提醒你一下，这里有一个潜在的风险。<strong>Set 的差集、并集和交集的计算复杂度较高，在数据量较大的情况下，如果直接执行这些计算，会导致 Redis 实例阻塞</strong>。</p><p>在主从集群中，为了避免主库因为 Set 做集合运算时导致主库被阻塞，我们可以选择一个从库完成集合运算；或者把数据返回给客户端，由客户端来完成聚合统计。</p><h4 id="点赞" tabindex="-1"><a class="header-anchor" href="#点赞"><span>点赞</span></a></h4><p>Set 类型可以保证一个用户只能点一个赞，这里举例子一个场景，key 是文章id，value 是用户id。</p><p><code>uid:1</code> 、<code>uid:2</code>、<code>uid:3</code> 三个用户分别对 article:1 文章点赞了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># uid:1 用户对文章 article:1 点赞</span></span>\n<span class="line"><span>&gt; SADD article:1 uid:1</span></span>\n<span class="line"><span>(integer) 1</span></span>\n<span class="line"><span># uid:2 用户对文章 article:1 点赞</span></span>\n<span class="line"><span>&gt; SADD article:1 uid:2</span></span>\n<span class="line"><span>(integer) 1</span></span>\n<span class="line"><span># uid:3 用户对文章 article:1 点赞</span></span>\n<span class="line"><span>&gt; SADD article:1 uid:3</span></span>\n<span class="line"><span>(integer) 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>uid:1</code> 取消了对 article:1 文章点赞。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; SREM article:1 uid:1</span></span>\n<span class="line"><span>(integer) 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 article:1 文章所有点赞用户 :</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; SMEMBERS article:1</span></span>\n<span class="line"><span>1) &quot;uid:3&quot;</span></span>\n<span class="line"><span>2) &quot;uid:2&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 article:1 文章的点赞用户数量：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; SCARD article:1</span></span>\n<span class="line"><span>(integer) 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>判断用户 <code>uid:1</code> 是否对文章 article:1 点赞了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; SISMEMBER article:1 uid:1</span></span>\n<span class="line"><span>(integer) 0  # 返回0说明没点赞，返回1则说明点赞了</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="共同关注" tabindex="-1"><a class="header-anchor" href="#共同关注"><span>共同关注</span></a></h4><p>使用交集运算，所以可以用来计算共同关注的好友、公众号等。</p><p>key 可以是用户id，value 则是已关注的公众号的id。</p><p><code>uid:1</code> 用户关注公众号 id 为 5、6、7、8、9，<code>uid:2</code> 用户关注公众号 id 为 7、8、9、10、11。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># uid:1 用户关注公众号 id 为 5、6、7、8、9</span></span>\n<span class="line"><span>&gt; SADD uid:1 5 6 7 8 9</span></span>\n<span class="line"><span>(integer) 5</span></span>\n<span class="line"><span># uid:2  用户关注公众号 id 为 7、8、9、10、11</span></span>\n<span class="line"><span>&gt; SADD uid:2 7 8 9 10 11</span></span>\n<span class="line"><span>(integer) 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>uid:1</code> 和 <code>uid:2</code> 共同关注的公众号：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 获取共同关注</span></span>\n<span class="line"><span>&gt; SINTER uid:1 uid:2</span></span>\n<span class="line"><span>1) &quot;7&quot;</span></span>\n<span class="line"><span>2) &quot;8&quot;</span></span>\n<span class="line"><span>3) &quot;9&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给 <code>uid:2</code> 推荐 <code>uid:1</code> 关注的公众号：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; SDIFF uid:1 uid:2</span></span>\n<span class="line"><span>1) &quot;5&quot;</span></span>\n<span class="line"><span>2) &quot;6&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="抽奖活动" tabindex="-1"><a class="header-anchor" href="#抽奖活动"><span>抽奖活动</span></a></h4><p>因为SET提供了SRANDMEMBER和SPOP两个操作，对应着抽奖活动。存储某活动中中奖的用户名 ，Set 类型因为有去重功能，可以保证同一个用户不会中奖两次。</p><p>key为抽奖活动名，value为员工名称，把所有员工名称放入抽奖箱 ：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt;SADD lucky Tom Jerry John Sean Marry Lindy Sary Mark</span></span>\n<span class="line"><span>(integer) 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果允许重复中奖，可以使用 SRANDMEMBER 命令。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 抽取 1 个一等奖：</span></span>\n<span class="line"><span>&gt; SRANDMEMBER lucky 1</span></span>\n<span class="line"><span>1) &quot;Tom&quot;</span></span>\n<span class="line"><span># 抽取 2 个二等奖：</span></span>\n<span class="line"><span>&gt; SRANDMEMBER lucky 2</span></span>\n<span class="line"><span>1) &quot;Mark&quot;</span></span>\n<span class="line"><span>2) &quot;Jerry&quot;</span></span>\n<span class="line"><span># 抽取 3 个三等奖：</span></span>\n<span class="line"><span>&gt; SRANDMEMBER lucky 3</span></span>\n<span class="line"><span>1) &quot;Sary&quot;</span></span>\n<span class="line"><span>2) &quot;Tom&quot;</span></span>\n<span class="line"><span>3) &quot;Jerry&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不允许重复中奖，可以使用 SPOP 命令。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 抽取一等奖1个</span></span>\n<span class="line"><span>&gt; SPOP lucky 1</span></span>\n<span class="line"><span>1) &quot;Sary&quot;</span></span>\n<span class="line"><span># 抽取二等奖2个</span></span>\n<span class="line"><span>&gt; SPOP lucky 2</span></span>\n<span class="line"><span>1) &quot;Jerry&quot;</span></span>\n<span class="line"><span>2) &quot;Mark&quot;</span></span>\n<span class="line"><span># 抽取三等奖3个</span></span>\n<span class="line"><span>&gt; SPOP lucky 3</span></span>\n<span class="line"><span>1) &quot;John&quot;</span></span>\n<span class="line"><span>2) &quot;Sean&quot;</span></span>\n<span class="line"><span>3) &quot;Lindy&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zset" tabindex="-1"><a class="header-anchor" href="#zset"><span><strong>ZSET</strong></span></a></h2><h3 id="简介-3" tabindex="-1"><a class="header-anchor" href="#简介-3"><span>简介</span></a></h3><p>Zset是有序集合类型，相比于 Set 类型多了一个排序属性 score（分值），每个存储元素相当于有两个值组成的，元素值和排序值。ZSET中的元素也是不能重复的，但是元素可以排序。</p><h3 id="内部实现-2" tabindex="-1"><a class="header-anchor" href="#内部实现-2"><span>内部实现</span></a></h3><p>Zset 类型的底层数据结构是由<strong>压缩列表或跳表</strong>实现的：</p><ul><li>如果有序集合的元素个数小于 <code>128</code> 个，并且每个元素的值小于 <code>64</code> 字节时，Redis 会使用<strong>压缩列表</strong>作为 Zset 类型的底层数据结构；</li><li>如果有序集合的元素不满足上面的条件，Redis 会使用<strong>跳表</strong>作为 Zset 类型的底层数据结构；</li></ul><p><strong>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。</strong></p><h3 id="常用命令-4" tabindex="-1"><a class="header-anchor" href="#常用命令-4"><span>常用命令</span></a></h3><p>Zset 常用操作：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 往有序集合key中加入带分值元素</span></span>\n<span class="line"><span>ZADD key score member [[score member]...]</span></span>\n<span class="line"><span># 往有序集合key中删除元素</span></span>\n<span class="line"><span>ZREM key member [member...]</span></span>\n<span class="line"><span># 返回有序集合key中元素member的分值</span></span>\n<span class="line"><span>ZSCORE key member</span></span>\n<span class="line"><span># 返回有序集合key中元素个数</span></span>\n<span class="line"><span>ZCARD key</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 为有序集合key中元素member的分值加上increment</span></span>\n<span class="line"><span>ZINCRBY key increment member</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 正序获取有序集合key从start下标到stop下标的元素</span></span>\n<span class="line"><span>ZRANGE key start stop [WITHSCORES]</span></span>\n<span class="line"><span># 倒序获取有序集合key从start下标到stop下标的元素</span></span>\n<span class="line"><span>ZREVRANGE key start stop [WITHSCORES]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 返回有序集合中指定分数区间内的成员，分数由低到高排序。</span></span>\n<span class="line"><span>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 返回指定成员区间内的成员，按字典正序排列, 分数必须相同。</span></span>\n<span class="line"><span>ZRANGEBYLEX key min max [LIMIT offset count]</span></span>\n<span class="line"><span># 返回指定成员区间内的成员，按字典倒序排列, 分数必须相同</span></span>\n<span class="line"><span>ZREVRANGEBYLEX key max min [LIMIT offset count]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Zset 运算操作（相比于 Set 类型，ZSet 类型没有支持差集运算）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 并集计算(相同元素分值相加)，numberkeys一共多少个key，WEIGHTS每个key对应的分值乘积</span></span>\n<span class="line"><span>ZUNIONSTORE destkey numberkeys key [key...]</span></span>\n<span class="line"><span># 交集计算(相同元素分值相加)，numberkeys一共多少个key，WEIGHTS每个key对应的分值乘积</span></span>\n<span class="line"><span>ZINTERSTORE destkey numberkeys key [key...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-3" tabindex="-1"><a class="header-anchor" href="#应用场景-3"><span>应用场景</span></a></h3><p>Zset 类型（Sorted Set，有序集合） 可以根据元素的权重来排序，我们可以自己来决定每个元素的权重值。比如说，我们可以根据元素插入 Sorted Set 的时间确定权重值，先插入的元素权重小，后插入的元素权重大。</p><p>在面对需要展示最新列表、排行榜等场景时，如果数据更新频繁或者需要分页显示，可以优先考虑使用 Sorted Set。</p><h4 id="排行榜" tabindex="-1"><a class="header-anchor" href="#排行榜"><span>排行榜</span></a></h4><p>有序集合比较典型的使用场景就是排行榜。</p><p>我们以博文点赞排名为例，小林发表了五篇博文，分别获得赞为 200、40、100、50、150。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># arcticle:1 文章获得了200个赞</span></span>\n<span class="line"><span>&gt; ZADD user:xiaolin:ranking 200 arcticle:1</span></span>\n<span class="line"><span>(integer) 1</span></span>\n<span class="line"><span># arcticle:2 文章获得了40个赞</span></span>\n<span class="line"><span>&gt; ZADD user:xiaolin:ranking 40 arcticle:2</span></span>\n<span class="line"><span>(integer) 1</span></span>\n<span class="line"><span># arcticle:3 文章获得了100个赞</span></span>\n<span class="line"><span>&gt; ZADD user:xiaolin:ranking 100 arcticle:3</span></span>\n<span class="line"><span>(integer) 1</span></span>\n<span class="line"><span># arcticle:4 文章获得了50个赞</span></span>\n<span class="line"><span>&gt; ZADD user:xiaolin:ranking 50 arcticle:4</span></span>\n<span class="line"><span>(integer) 1</span></span>\n<span class="line"><span># arcticle:5 文章获得了150个赞</span></span>\n<span class="line"><span>&gt; ZADD user:xiaolin:ranking 150 arcticle:5</span></span>\n<span class="line"><span>(integer) 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文章 arcticle:4 新增一个赞，可以使用 ZINCRBY 命令（为有序集合key中元素member的分值加上increment）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; ZINCRBY user:xiaolin:ranking 1 arcticle:4</span></span>\n<span class="line"><span>&quot;51&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看某篇文章的赞数，可以使用 ZSCORE 命令（返回有序集合key中元素个数）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; ZSCORE user:xiaolin:ranking arcticle:4</span></span>\n<span class="line"><span>&quot;50&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取小林文章赞数最多的 3 篇文章，可以使用 ZREVRANGE 命令（倒序获取有序集合 key 从start下标到stop下标的元素）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># WITHSCORES 表示把 score 也显示出来</span></span>\n<span class="line"><span>&gt; ZREVRANGE user:xiaolin:ranking 0 2 WITHSCORES</span></span>\n<span class="line"><span>1) &quot;arcticle:1&quot;</span></span>\n<span class="line"><span>2) &quot;200&quot;</span></span>\n<span class="line"><span>3) &quot;arcticle:5&quot;</span></span>\n<span class="line"><span>4) &quot;150&quot;</span></span>\n<span class="line"><span>5) &quot;arcticle:3&quot;</span></span>\n<span class="line"><span>6) &quot;100&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取小林 100 赞到 200 赞的文章，可以使用 ZRANGEBYSCORE 命令（返回有序集合中指定分数区间内的成员，分数由低到高排序）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; ZRANGEBYSCORE user:xiaolin:ranking 100 200 WITHSCORES</span></span>\n<span class="line"><span>1) &quot;arcticle:3&quot;</span></span>\n<span class="line"><span>2) &quot;100&quot;</span></span>\n<span class="line"><span>3) &quot;arcticle:5&quot;</span></span>\n<span class="line"><span>4) &quot;150&quot;</span></span>\n<span class="line"><span>5) &quot;arcticle:1&quot;</span></span>\n<span class="line"><span>6) &quot;200&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="电话、姓名排序" tabindex="-1"><a class="header-anchor" href="#电话、姓名排序"><span>电话、姓名排序</span></a></h4><p>使用有序集合的 <code>ZRANGEBYLEX</code> 或 <code>ZREVRANGEBYLEX</code> 可以帮助我们实现电话号码或姓名的排序，我们以 <code>ZRANGEBYLEX</code> （返回满足指定条件的成员，按 key 正序排列，分数必须相同）为例。</p><p><strong>注意：不要在分数不一致的 SortSet 集合中去使用 ZRANGEBYLEX和 ZREVRANGEBYLEX 指令，因为获取的结果会不准确。</strong></p><p><em>1、电话排序</em></p><p>我们可以将电话号码存储到 SortSet 中，然后根据需要来获取号段：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; ZADD phone 0 13100111100 0 13110114300 0 13132110901</span></span>\n<span class="line"><span>(integer) 3</span></span>\n<span class="line"><span>&gt; ZADD phone 0 13200111100 0 13210414300 0 13252110901</span></span>\n<span class="line"><span>(integer) 3</span></span>\n<span class="line"><span>&gt; ZADD phone 0 13300111100 0 13310414300 0 13352110901</span></span>\n<span class="line"><span>(integer) 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取所有号码:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; ZRANGEBYLEX phone - +</span></span>\n<span class="line"><span>1) &quot;13100111100&quot;</span></span>\n<span class="line"><span>2) &quot;13110114300&quot;</span></span>\n<span class="line"><span>3) &quot;13132110901&quot;</span></span>\n<span class="line"><span>4) &quot;13200111100&quot;</span></span>\n<span class="line"><span>5) &quot;13210414300&quot;</span></span>\n<span class="line"><span>6) &quot;13252110901&quot;</span></span>\n<span class="line"><span>7) &quot;13300111100&quot;</span></span>\n<span class="line"><span>8) &quot;13310414300&quot;</span></span>\n<span class="line"><span>9) &quot;13352110901&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 132 号段的号码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; ZRANGEBYLEX phone [132 (133</span></span>\n<span class="line"><span>1) &quot;13200111100&quot;</span></span>\n<span class="line"><span>2) &quot;13210414300&quot;</span></span>\n<span class="line"><span>3) &quot;13252110901&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取132、133号段的号码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; ZRANGEBYLEX phone [132 (134</span></span>\n<span class="line"><span>1) &quot;13200111100&quot;</span></span>\n<span class="line"><span>2) &quot;13210414300&quot;</span></span>\n<span class="line"><span>3) &quot;13252110901&quot;</span></span>\n<span class="line"><span>4) &quot;13300111100&quot;</span></span>\n<span class="line"><span>5) &quot;13310414300&quot;</span></span>\n<span class="line"><span>6) &quot;13352110901&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>2、姓名排序</em></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; zadd names 0 Toumas 0 Jake 0 Bluetuo 0 Gaodeng 0 Aimini 0 Aidehua</span></span>\n<span class="line"><span>(integer) 6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取所有人的名字:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; ZRANGEBYLEX names - +</span></span>\n<span class="line"><span>1) &quot;Aidehua&quot;</span></span>\n<span class="line"><span>2) &quot;Aimini&quot;</span></span>\n<span class="line"><span>3) &quot;Bluetuo&quot;</span></span>\n<span class="line"><span>4) &quot;Gaodeng&quot;</span></span>\n<span class="line"><span>5) &quot;Jake&quot;</span></span>\n<span class="line"><span>6) &quot;Toumas&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取名字中大写字母A开头的所有人：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; ZRANGEBYLEX names [A (B</span></span>\n<span class="line"><span>1) &quot;Aidehua&quot;</span></span>\n<span class="line"><span>2) &quot;Aimini&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取名字中大写字母 C 到 Z 的所有人：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; ZRANGEBYLEX names [C [Z</span></span>\n<span class="line"><span>1) &quot;Gaodeng&quot;</span></span>\n<span class="line"><span>2) &quot;Jake&quot;</span></span>\n<span class="line"><span>3) &quot;Toumas&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bitmap" tabindex="-1"><a class="header-anchor" href="#bitmap"><span><strong>BitMap</strong></span></a></h2><h3 id="简介-4" tabindex="-1"><a class="header-anchor" href="#简介-4"><span>简介</span></a></h3><p>Bitmap，即位图，是一串连续的二进制数组，可以通过偏移量（offset）定位元素。</p><p>BitMap可以通过<code>0|1</code>的设置，表示某个元素的值或者状态。</p><p>由于比特是计算机中最小的单位，使用它进行储存将非常节省空间，特别适合一些数据量大且使用<strong>二值统计的场景</strong>。</p><h3 id="内部实现-3" tabindex="-1"><a class="header-anchor" href="#内部实现-3"><span>内部实现</span></a></h3><p>Bitmap 本身是用 String 类型作为底层数据结构实现的。String 类型是二进制安全的，会把bitmap保存为一个二进制的字节数组， redis把字节数组的每个 bit 位利用起来，用来表示一个元素的二值状态，我们可以把 Bitmap 看作是一个 bit 数组。</p><h3 id="常用命令-5" tabindex="-1"><a class="header-anchor" href="#常用命令-5"><span>常用命令</span></a></h3><p>bitmap基本操作：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 设置值，其中value只能是 0 和 1</span></span>\n<span class="line"><span>SETBIT key offset value</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 获取值</span></span>\n<span class="line"><span>GETBIT key offset</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 获取指定范围内值为 1 的个数</span></span>\n<span class="line"><span># start 和 end 以字节为单位</span></span>\n<span class="line"><span>BITCOUNT key start end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bitmap 运算操作：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># BitMap间的运算</span></span>\n<span class="line"><span># operations 位移操作符，枚举值</span></span>\n<span class="line"><span>  AND 与运算 &amp;</span></span>\n<span class="line"><span>  OR 或运算 |</span></span>\n<span class="line"><span>  XOR 异或 ^</span></span>\n<span class="line"><span>  NOT 取反 ~</span></span>\n<span class="line"><span># result 计算的结果，会存储在该key中</span></span>\n<span class="line"><span># key1 … keyn 参与运算的key，可以有多个，空格分割，not运算只能一个key</span></span>\n<span class="line"><span># 当 BITOP 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 0。返回值是保存到result中（以字节byte为单位）。</span></span>\n<span class="line"><span>BITOP [operations] [result] [key1] [keyn…]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 返回指定key中第一次出现指定value(0/1)的位置</span></span>\n<span class="line"><span>BITPOS [key] [value]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-4" tabindex="-1"><a class="header-anchor" href="#应用场景-4"><span>应用场景</span></a></h3><p>Bitmap 类型非常适合<strong>二值状态</strong>统计的场景，记录海量数据时，Bitmap 能够很有效地节省内存空间。</p><h4 id="签到统计" tabindex="-1"><a class="header-anchor" href="#签到统计"><span>签到统计</span></a></h4><p>在签到打卡的场景中，我们只用记录签到（1）或未签到（0），所以它就是非常典型的二值状态。</p><p>签到统计时，每个用户一天的签到用 1 个 bit 位就能表示，一个月（假设是 31 天）的签到情况用 31 个 bit 位就可以，而一年的签到也只需要用 365 个 bit 位。</p><p>假设我们要统计 ID 100 的用户在 2022 年 6 月份的签到情况，就可以按照下面的步骤进行操作。</p><p>第一步，执行下面的命令，记录该用户 6 月 3 号已签到。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SETBIT uid:sign:100:202206 2 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第二步，检查该用户 6 月 3 日是否签到。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GETBIT uid:sign:100:202206 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第三步，统计该用户在 6 月份的签到次数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>BITCOUNT uid:sign:100:202206</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，我们就知道该用户在 6 月份的签到情况了。</p><blockquote><p>如何统计这个月首次打卡时间呢？</p></blockquote><p>Redis 提供了 <code>BITPOS key bitValue [start] [end]</code>指令，返回数据表示 Bitmap 中第一个值为 <code>bitValue</code> 的 offset 位置。</p><p>在默认情况下， 命令将检测整个位图， 用户可以通过可选的 <code>start</code> 参数和 <code>end</code> 参数指定要检测的范围。所以我们可以通过执行这条命令来获取 userID = 100 在 2022 年 6 月份<strong>首次打卡</strong>日期：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>BITPOS uid:sign:100:202206 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>需要注意的是，因为 offset 从 0 开始的，所以我们需要将返回的 value + 1 。</p><h4 id="判断用户登陆态" tabindex="-1"><a class="header-anchor" href="#判断用户登陆态"><span>判断用户登陆态</span></a></h4><p>Bitmap 提供了 <code>GETBIT、SETBIT</code> 操作，需要注意的是 offset 从 0 开始。</p><p>只需要一个 key = login_status 表示存储用户登陆状态集合数据， 将用户 ID 作为 offset，在线就设置为 1，下线设置 0。通过 <code>GETBIT</code>判断对应的用户是否在线。 5000 万用户只需要 6 MB 的空间。</p><p>假如我们要判断 ID = 10086 的用户的登陆情况：</p><p>第一步，执行以下指令，表示用户已登录。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SETBIT login_status 10086 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第二步，检查该用户是否登陆，返回值 1 表示已登录。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GETBIT login_status 10086</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第三步，登出，将 offset 对应的 value 设置成 0。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SETBIT login_status 10086 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="记录连续签到的用户" tabindex="-1"><a class="header-anchor" href="#记录连续签到的用户"><span>记录连续签到的用户</span></a></h4><p>如何统计出这连续 7 天连续打卡用户总数呢？</p><p>我们把每天的日期作为 Bitmap 的 key，userId 作为 offset，若是打卡则将 offset 位置的 bit 设置成 1。</p><p>key 对应的集合的每个 bit 位的数据则是一个用户在该日期的打卡记录。</p><p>一共有 7 个这样的 Bitmap，如果我们能对这 7 个 Bitmap 的对应的 bit 位做『与』运算。同样的 UserID offset 都是一样的，当一个 userID 在 7 个 Bitmap 对应对应的 offset 位置的 bit = 1 就说明该用户 7 天连续打卡。</p><p>结果保存到一个新 Bitmap 中，我们再通过<code>BITCOUNT</code> 统计 bit = 1 的个数便得到了连续打卡 7 天的用户总数了。</p><p>Redis 提供了 <code>BITOP operation destkey key [key ...]</code>这个指令用于对一个或者多个 key 的 Bitmap 进行位元操作。</p><ul><li><code>operation</code> 可以是 <code>and</code>、<code>OR</code>、<code>NOT</code>、<code>XOR</code>。当 BITOP 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 <code>0</code> 。空的 <code>key</code> 也被看作是包含 <code>0</code> 的字符串序列。</li></ul><p>假设要统计 3 天连续打卡的用户数，则是将三个 bitmap 进行 AND 操作，并将结果保存到 destmap 中，接着对 destmap 执行 BITCOUNT 统计，如下命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 与操作</span></span>\n<span class="line"><span>BITOP AND destmap bitmap:01 bitmap:02 bitmap:03</span></span>\n<span class="line"><span># 统计 bit 位 =  1 的个数</span></span>\n<span class="line"><span>BITCOUNT destmap</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使一天产生一个亿的数据，Bitmap 占用的内存也不大，大约占 12 MB 的内存（10^8/8/1024/1024），7 天的 Bitmap 的内存开销约为 84 MB。同时我们最好给 Bitmap 设置过期时间，让 Redis 删除过期的打卡数据，节省内存。</p><h2 id="hyperloglog" tabindex="-1"><a class="header-anchor" href="#hyperloglog"><span><strong>HyperLogLog</strong></span></a></h2><h3 id="简介-5" tabindex="-1"><a class="header-anchor" href="#简介-5"><span>简介</span></a></h3><p>hyperloglog是一种基数统计的数据类型，就是指统计一个集合中不重复的元素个数。但要注意，HyperLogLog 是统计规则是基于概率完成的，不是非常准确，标准误算率是 0.81%。简单来说 HyperLogLog <strong>提供不精确的去重计数</strong>。</p><p>HyperLogLog 的优点是，在输入元素的数量非常大时，计算基数所需的内存空间总是固定的、并且是很小的。</p><p>在 Redis 里面，<strong>每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 <code>2^64</code> 个不同元素的基数</strong>，和元素越多就越耗费内存的 Set 和 Hash 类型相比，HyperLogLog 就非常节省空间。</p><p>这什么概念？举个例子给大家对比一下。</p><p>用 Java 语言来说，一般 long 类型占用 8 字节，而 1 字节有 8 位，即：1 byte = 8 bit，即 long 数据类型最大可以表示的数是：<code>2^63-1</code>。对应上面的<code>2^64</code>个数，假设此时有<code>2^63-1</code>这么多个数，从 <code>0 ~ 2^63-1</code>，按照<code>long</code>以及<code>1k = 1024 字节</code>的规则来计算内存总数，就是：<code>((2^63-1) * 8/1024)K</code>，这是很庞大的一个数，存储空间远远超过<code>12K</code>，而 <code>HyperLogLog</code> 却可以用 <code>12K</code> 就能统计完。</p><h3 id="常见命令" tabindex="-1"><a class="header-anchor" href="#常见命令"><span>常见命令</span></a></h3><p>HyperLogLog 命令很少，就三个。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 添加指定元素到 HyperLogLog 中</span></span>\n<span class="line"><span>PFADD key element [element ...]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 返回给定 HyperLogLog 的基数估算值。</span></span>\n<span class="line"><span>PFCOUNT key [key ...]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 将多个 HyperLogLog 合并为一个 HyperLogLog</span></span>\n<span class="line"><span>PFMERGE destkey sourcekey [sourcekey ...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-5" tabindex="-1"><a class="header-anchor" href="#应用场景-5"><span>应用场景</span></a></h3><h4 id="百万级网页-uv-计数" tabindex="-1"><a class="header-anchor" href="#百万级网页-uv-计数"><span>百万级网页 UV 计数</span></a></h4><p>Redis HyperLogLog 优势在于只需要花费 12 KB 内存，就可以计算接近 2^64 个元素的基数，和元素越多就越耗费内存的 Set 和 Hash 类型相比，HyperLogLog 就非常节省空间。</p><p>所以，非常适合统计百万级以上的网页 UV 的场景。</p><p>在统计 UV 时，你可以用 PFADD 命令（用于向 HyperLogLog 中添加新元素）把访问页面的每个用户都添加到 HyperLogLog 中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>PFADD page1:uv user1 user2 user3 user4 user5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来，就可以用 PFCOUNT 命令直接获得 page1 的 UV 值了，这个命令的作用就是返回 HyperLogLog 的统计结果。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>PFCOUNT page1:uv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不过，有一点需要你注意一下，HyperLogLog 的统计规则是基于概率完成的，所以它给出的统计结果是有一定误差的，标准误算率是 0.81%。</p><p>这也就意味着，你使用 HyperLogLog 统计的 UV 是 100 万，但实际的 UV 可能是 101 万。虽然误差率不算大，但是，如果你需要精确统计结果的话，最好还是继续用 Set 或 Hash 类型。</p><h2 id="geo" tabindex="-1"><a class="header-anchor" href="#geo"><span><strong>GEO</strong></span></a></h2><p>Redis GEO 是 Redis 3.2 版本新增的数据类型，主要用于存储地理位置信息，并对存储的信息进行操作。</p><h3 id="内部实现-4" tabindex="-1"><a class="header-anchor" href="#内部实现-4"><span>内部实现</span></a></h3><p>GEO 本身并没有设计新的底层数据结构，而是直接使用了 Sorted Set 集合类型。【sorted set就是zset】</p><p>GEO 类型使用 GeoHash 编码方法实现了经纬度到 Sorted Set 中元素权重分数的转换，这其中的两个关键机制就是「对二维地图做区间划分」和「对区间进行编码」。一组经纬度落在某个区间后，就用区间的编码值来表示，并把编码值作为 Sorted Set 元素的权重分数。</p><p>这样一来，我们就可以把经纬度保存到 Sorted Set 中，利用 Sorted Set 提供的“按权重进行有序范围查找”的特性，实现 LBS 服务中频繁使用的“搜索附近”的需求。</p><h3 id="常用命令-6" tabindex="-1"><a class="header-anchor" href="#常用命令-6"><span>常用命令</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中。</span></span>\n<span class="line"><span>GEOADD key longitude latitude member [longitude latitude member ...]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。</span></span>\n<span class="line"><span>GEOPOS key member [member ...]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 返回两个给定位置之间的距离。</span></span>\n<span class="line"><span>GEODIST key member1 member2 [m|km|ft|mi]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</span></span>\n<span class="line"><span>GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-6" tabindex="-1"><a class="header-anchor" href="#应用场景-6"><span>应用场景</span></a></h3><h4 id="打车" tabindex="-1"><a class="header-anchor" href="#打车"><span>打车</span></a></h4><p>这里以打车的场景为例，介绍下具体如何使用 GEO 命令：GEOADD 和 GEORADIUS 这两个命令。</p><p>假设车辆 ID 是 33，经纬度位置是（116.034579，39.030452），我们可以用一个 GEO 集合保存所有车辆的经纬度，集合 key 是 cars:locations。</p><p>执行下面的这个命令，就可以把 ID 号为 33 的车辆的当前经纬度位置存入 GEO 集合中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GEOADD cars:locations 116.034579 39.030452 33</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当用户想要寻找自己附近的网约车时，LBS 应用就可以使用 GEORADIUS 命令。</p><p>例如，LBS 应用执行下面的命令时，Redis 会根据输入的用户的经纬度信息（116.054579，39.030452 ），查找以这个经纬度为中心的 5 公里内的车辆信息，并返回给 LBS 应用。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GEORADIUS cars:locations 116.054579 39.030452 5 km ASC COUNT 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream"><span><strong>Stream</strong></span></a></h2><h3 id="简介-6" tabindex="-1"><a class="header-anchor" href="#简介-6"><span>简介</span></a></h3><p>Redis Stream 是 Redis 5.0 版本新增加的数据类型，是Redis 专门为消息队列设计的一个数据类型。</p><p>在 Redis 5.0 Stream 没出来之前，消息队列的实现方式都有着各自的缺陷，例如：</p><ul><li>发布订阅模式，不能持久化也就无法可靠的保存消息，并且对于离线重连的客户端不能读取历史消息的缺陷；</li><li>List 实现消息队列的方式不能重复消费，一个消息消费完就会被删除，而且生产者需要自行实现全局唯一ID。</li></ul><p>基于以上问题，Redis 5.0 便推出了 Stream 类型也是此版本最重要的功能，用于实现消息队列，它支持消息的持久化、支持自动生成全局唯一 ID、支持 ack 确认消息的模式、支持消费组模式等，让消息队列更加的稳定和可靠。</p><h3 id="常见命令-1" tabindex="-1"><a class="header-anchor" href="#常见命令-1"><span>常见命令</span></a></h3><p>Stream 消息队列操作命令：</p><ul><li>XADD：插入消息，保证有序，可以自动生成全局唯一 ID；</li><li>XLEN ：查询消息长度；</li><li>XREAD：用于读取消息，可以按 ID 读取数据；</li><li>XDEL ： 根据消息 ID 删除消息；</li><li>DEL ：删除整个 Stream；</li><li>XRANGE ：读取区间消息</li><li>XREADGROUP：按消费组形式读取消息；</li><li>XPENDING 和 XACK： <ul><li>XPENDING 命令可以用来查询每个消费组内所有消费者「已读取、但尚未确认」的消息；</li><li>XACK 命令用于向消息队列确认消息处理已完成；</li></ul></li></ul><h3 id="应用场景-7" tabindex="-1"><a class="header-anchor" href="#应用场景-7"><span>应用场景</span></a></h3><h4 id="消息队列-1" tabindex="-1"><a class="header-anchor" href="#消息队列-1"><span>消息队列</span></a></h4><p>生产者通过 XADD 命令插入一条消息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># * 表示让 Redis 为插入的数据自动生成一个全局唯一的 ID</span></span>\n<span class="line"><span># 往名称为 mymq 的消息队列中插入一条消息，消息的键是 name，值是 xiaolin</span></span>\n<span class="line"><span>&gt; XADD mymq * name xiaolin</span></span>\n<span class="line"><span>&quot;1654254953808-0&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入成功后会返回全局唯一的 ID：&quot;1654254953808-0&quot;。消息的全局唯一 ID 由两部分组成：</p><ul><li>第一部分“1654254953808”是数据插入时，以毫秒为单位计算的当前服务器时间；</li><li>第二部分表示插入消息在当前毫秒内的消息序号，这是从 0 开始编号的。例如，“1654254953808-0”就表示在“1654254953808”毫秒内的第 1 条消息。</li></ul><p>消费者通过 XREAD 命令从消息队列中读取消息时，可以指定一个消息 ID，并从这个消息 ID 的下一条消息开始进行读取（注意是输入消息 ID 的下一条信息开始读取，不是查询输入ID的消息）。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 从 ID 号为 1654254953807-0 的消息开始，读取后续的所有消息（示例中一共 1 条）。</span></span>\n<span class="line"><span>&gt; XREAD STREAMS mymq 1654254953807-0</span></span>\n<span class="line"><span>1) 1) &quot;mymq&quot;</span></span>\n<span class="line"><span>   2) 1) 1) &quot;1654254953808-0&quot;</span></span>\n<span class="line"><span>         2) 1) &quot;name&quot;</span></span>\n<span class="line"><span>            2) &quot;xiaolin&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<strong>想要实现阻塞读（当没有数据时，阻塞住），可以调用 XRAED 时设定 BLOCK 配置项</strong>，实现类似于 BRPOP 的阻塞读取操作。</p><p>比如，下面这命令，设置了 BLOCK 10000 的配置项，10000 的单位是毫秒，表明 XREAD 在读取最新消息时，如果没有消息到来，XREAD 将阻塞 10000 毫秒（即 10 秒），然后再返回。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 命令最后的“$”符号表示读取最新的消息</span></span>\n<span class="line"><span>&gt; XREAD BLOCK 10000 STREAMS mymq $</span></span>\n<span class="line"><span>(nil)</span></span>\n<span class="line"><span>(10.00s)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Stream 的基础方法，使用 xadd 存入消息和 xread 循环阻塞读取消息的方式可以实现简易版的消息队列，交互流程如下图所示：</p><blockquote><p>前面介绍的这些操作 List 也支持的，接下来看看 Stream 特有的功能。</p></blockquote><p>Stream 可以以使用 <strong>XGROUP 创建消费组</strong>，创建消费组之后，Stream 可以使用 XREADGROUP 命令让消费组内的消费者读取消息。</p><p>创建两个消费组，这两个消费组消费的消息队列是 mymq，都指定从第一条消息开始读取：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 创建一个名为 group1 的消费组，0-0 表示从第一条消息开始读取。</span></span>\n<span class="line"><span>&gt; XGROUP CREATE mymq group1 0-0</span></span>\n<span class="line"><span>OK</span></span>\n<span class="line"><span># 创建一个名为 group2 的消费组，0-0 表示从第一条消息开始读取。</span></span>\n<span class="line"><span>&gt; XGROUP CREATE mymq group2 0-0</span></span>\n<span class="line"><span>OK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费组 group1 内的消费者 consumer1 从 mymq 消息队列中读取所有消息的命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 命令最后的参数“&gt;”，表示从第一条尚未被消费的消息开始读取。</span></span>\n<span class="line"><span>&gt; XREADGROUP GROUP group1 consumer1 STREAMS mymq &gt;</span></span>\n<span class="line"><span>1) 1) &quot;mymq&quot;</span></span>\n<span class="line"><span>   2) 1) 1) &quot;1654254953808-0&quot;</span></span>\n<span class="line"><span>         2) 1) &quot;name&quot;</span></span>\n<span class="line"><span>            2) &quot;xiaolin&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>消息队列中的消息一旦被消费组里的一个消费者读取了，就不能再被该消费组内的其他消费者读取了，即同一个消费组里的消费者不能消费同一条消息</strong>。</p><p>比如说，我们执行完刚才的 XREADGROUP 命令后，再执行一次同样的命令，此时读到的就是空值了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; XREADGROUP GROUP group1 consumer1 STREAMS mymq &gt;</span></span>\n<span class="line"><span>(nil)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，<strong>不同消费组的消费者可以消费同一条消息（但是有前提条件，创建消息组的时候，不同消费组指定了相同位置开始读取消息）</strong>。</p><p>比如说，刚才 group1 消费组里的 consumer1 消费者消费了一条 id 为 1654254953808-0 的消息，现在用 group2 消费组里的 consumer1 消费者消费消息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; XREADGROUP GROUP group2 consumer1 STREAMS mymq &gt;</span></span>\n<span class="line"><span>1) 1) &quot;mymq&quot;</span></span>\n<span class="line"><span>   2) 1) 1) &quot;1654254953808-0&quot;</span></span>\n<span class="line"><span>         2) 1) &quot;name&quot;</span></span>\n<span class="line"><span>            2) &quot;xiaolin&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我创建两组的消费组都是从第一条消息开始读取，所以可以看到第二组的消费者依然可以消费 id 为 1654254953808-0 的这一条消息。因此，不同的消费组的消费者可以消费同一条消息。</p><p>使用消费组的目的是让组内的多个消费者共同分担读取消息，所以，我们通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的。</p><p>例如，我们执行下列命令，让 group2 中的 consumer1、2、3 各自读取一条消息。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 让 group2 中的 consumer1 从 mymq 消息队列中消费一条消息</span></span>\n<span class="line"><span>&gt; XREADGROUP GROUP group2 consumer1 COUNT 1 STREAMS mymq &gt;</span></span>\n<span class="line"><span>1) 1) &quot;mymq&quot;</span></span>\n<span class="line"><span>   2) 1) 1) &quot;1654254953808-0&quot;</span></span>\n<span class="line"><span>         2) 1) &quot;name&quot;</span></span>\n<span class="line"><span>            2) &quot;xiaolin&quot;</span></span>\n<span class="line"><span># 让 group2 中的 consumer2 从 mymq 消息队列中消费一条消息</span></span>\n<span class="line"><span>&gt; XREADGROUP GROUP group2 consumer2 COUNT 1 STREAMS mymq &gt;</span></span>\n<span class="line"><span>1) 1) &quot;mymq&quot;</span></span>\n<span class="line"><span>   2) 1) 1) &quot;1654256265584-0&quot;</span></span>\n<span class="line"><span>         2) 1) &quot;name&quot;</span></span>\n<span class="line"><span>            2) &quot;xiaolincoding&quot;</span></span>\n<span class="line"><span># 让 group2 中的 consumer3 从 mymq 消息队列中消费一条消息</span></span>\n<span class="line"><span>&gt; XREADGROUP GROUP group2 consumer3 COUNT 1 STREAMS mymq &gt;</span></span>\n<span class="line"><span>1) 1) &quot;mymq&quot;</span></span>\n<span class="line"><span>   2) 1) 1) &quot;1654256271337-0&quot;</span></span>\n<span class="line"><span>         2) 1) &quot;name&quot;</span></span>\n<span class="line"><span>            2) &quot;Tom&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>基于 Stream 实现的消息队列，如何保证消费者在发生故障或宕机再次重启后，仍然可以读取未处理完的消息？</p></blockquote><p>Streams 会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息，直到消费者使用 XACK 命令通知 Streams“消息已经处理完成”。</p><p>消费确认增加了消息的可靠性，一般在业务处理完成之后，需要执行 XACK 命令确认消息已经被消费完成，整个流程的执行如下图所示：</p><p>如果消费者没有成功处理消息，它就不会给 Streams 发送 XACK 命令，消息仍然会留存。此时，<strong>消费者可以在重启后，用 XPENDING 命令查看已读取、但尚未确认处理完成的消息</strong>。</p><p>例如，我们来查看一下 group2 中各个消费者已读取、但尚未确认的消息个数，命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>127.0.0.1:6379&gt; XPENDING mymq group2</span></span>\n<span class="line"><span>1) (integer) 3</span></span>\n<span class="line"><span>2) &quot;1654254953808-0&quot;  # 表示 group2 中所有消费者读取的消息最小 ID</span></span>\n<span class="line"><span>3) &quot;1654256271337-0&quot;  # 表示 group2 中所有消费者读取的消息最大 ID</span></span>\n<span class="line"><span>4) 1) 1) &quot;consumer1&quot;</span></span>\n<span class="line"><span>      2) &quot;1&quot;</span></span>\n<span class="line"><span>   2) 1) &quot;consumer2&quot;</span></span>\n<span class="line"><span>      2) &quot;1&quot;</span></span>\n<span class="line"><span>   3) 1) &quot;consumer3&quot;</span></span>\n<span class="line"><span>      2) &quot;1&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想查看某个消费者具体读取了哪些数据，可以执行下面的命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 查看 group2 里 consumer2 已从 mymq 消息队列中读取了哪些消息</span></span>\n<span class="line"><span>&gt; XPENDING mymq group2 - + 10 consumer2</span></span>\n<span class="line"><span>1) 1) &quot;1654256265584-0&quot;</span></span>\n<span class="line"><span>   2) &quot;consumer2&quot;</span></span>\n<span class="line"><span>   3) (integer) 410700</span></span>\n<span class="line"><span>   4) (integer) 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，consumer2 已读取的消息的 ID 是 1654256265584-0。</p><p><strong>一旦消息 1654256265584-0 被 consumer2 处理了，consumer2 就可以使用 XACK 命令通知 Streams，然后这条消息就会被删除</strong>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; XACK mymq group2 1654256265584-0</span></span>\n<span class="line"><span>(integer) 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们再使用 XPENDING 命令查看时，就可以看到，consumer2 已经没有已读取、但尚未确认处理的消息了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; XPENDING mymq group2 - + 10 consumer2</span></span>\n<span class="line"><span>(empty array)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，基于 Stream 实现的消息队列就说到这里了，小结一下：</p><ul><li>消息保序：XADD/XREAD</li><li>阻塞读取：XREAD block</li><li>重复消息处理：Stream 在使用 XADD 命令，会自动生成全局唯一 ID；</li><li>消息可靠性：内部使用 PENDING List 自动保存消息，使用 XPENDING 命令查看消费组已经读取但是未被确认的消息，消费者使用 XACK 确认消息；</li><li>支持消费组形式消费数据</li></ul><blockquote><p>Redis 基于 Stream 消息队列与专业的消息队列有哪些差距？</p></blockquote><p>一个专业的消息队列，必须要做到两大块：</p><ul><li>消息不丢。</li><li>消息可堆积。</li></ul><p><em>1、Redis Stream 消息会丢失吗？</em></p><p>使用一个消息队列，其实就分为三大块：<strong>生产者、队列中间件、消费者</strong>，所以要保证消息就是保证三个环节都不能丢失数据。</p><p>Redis Stream 消息队列能不能保证三个环节都不丢失数据？</p><ul><li><p>Redis 生产者会不会丢消息？生产者会不会丢消息，取决于生产者对于异常情况的处理是否合理。 从消息被生产出来，然后提交给 MQ 的过程中，只要能正常收到 （ MQ 中间件） 的 ack 确认响应，就表示发送成功，所以只要处理好返回值和异常，如果返回异常则进行消息重发，那么这个阶段是不会出现消息丢失的。</p></li><li><p>Redis 消费者会不会丢消息？不会，因为 Stream （ MQ 中间件）会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息，但是未被确认的消息。消费者可以在重启后，用 XPENDING 命令查看已读取、但尚未确认处理完成的消息。等到消费者执行完业务逻辑后，再发送消费确认 XACK 命令，也能保证消息的不丢失。</p></li><li><p>Redis 消息中间件会不会丢消息？</p><p>会</p><p>，Redis 在以下 2 个场景下，都会导致数据丢失：</p><ul><li>AOF 持久化配置为每秒写盘，但这个写盘过程是异步的，Redis 宕机时会存在数据丢失的可能</li><li>主从复制也是异步的，<a href="https://xiaolincoding.com/redis/cluster/master_slave_replication.html#redis-%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1" target="_blank" rel="noopener noreferrer">主从切换时，也存在丢失数据的可能 (opens new window)</a>。</li></ul></li></ul><p>可以看到，Redis 在队列中间件环节无法保证消息不丢。像 RabbitMQ 或 Kafka 这类专业的队列中间件，在使用时是部署一个集群，生产者在发布消息时，队列中间件通常会写「多个节点」，也就是有多个副本，这样一来，即便其中一个节点挂了，也能保证集群的数据不丢失。</p><p><em>2、Redis Stream 消息可堆积吗？</em></p><p>Redis 的数据都存储在内存中，这就意味着一旦发生消息积压，则会导致 Redis 的内存持续增长，如果超过机器内存上限，就会面临被 OOM 的风险。</p><p>所以 Redis 的 Stream 提供了可以指定队列最大长度的功能，就是为了避免这种情况发生。</p><p>当指定队列最大长度时，队列长度超过上限后，旧消息会被删除，只保留固定长度的新消息。这么来看，Stream 在消息积压时，如果指定了最大长度，还是有可能丢失消息的。</p><p>但 Kafka、RabbitMQ 专业的消息队列它们的数据都是存储在磁盘上，当消息积压时，无非就是多占用一些磁盘空间。</p><p>因此，把 Redis 当作队列来使用时，会面临的 2 个问题：</p><ul><li>Redis 本身可能会丢数据；</li><li>面对消息挤压，内存资源会紧张；</li></ul><p>所以，能不能将 Redis 作为消息队列来使用，关键看你的业务场景：</p><ul><li>如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。</li><li>如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。</li></ul><blockquote><p>补充：Redis 发布/订阅机制为什么不可以作为消息队列？</p></blockquote><p>发布订阅机制存在以下缺点，都是跟丢失数据有关：</p><ol><li>发布/订阅机制没有基于任何数据类型实现，所以不具备「数据持久化」的能力，也就是发布/订阅机制的相关操作，不会写入到 RDB 和 AOF 中，当 Redis 宕机重启，发布/订阅机制的数据也会全部丢失。</li><li>发布订阅模式是“发后既忘”的工作模式，如果有订阅者离线重连之后不能消费之前的历史消息。</li><li>当消费端有一定的消息积压时，也就是生产者发送的消息，消费者消费不过来时，如果超过 32M 或者是 60s 内持续保持在 8M 以上，消费端会被强行断开，这个参数是在配置文件中设置的，默认值是 <code>client-output-buffer-limit pubsub 32mb 8mb 60</code>。</li></ol><p>所以，发布/订阅机制只适合即时通讯的场景，比如<a href="https://xiaolincoding.com/redis/cluster/sentinel.html#%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%84%E6%88%90%E7%9A%84" target="_blank" rel="noopener noreferrer">构建哨兵集群 (opens new window)</a>的场景采用了发布/订阅机制。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h2><p>Redis 常见的五种数据类型：<strong>String（字符串），Hash（哈希），List（列表），Set（集合）及 Zset(sorted set：有序集合)</strong>。</p><p>这五种数据类型都由多种数据结构实现的，主要是出于时间和空间的考虑，当数据量小的时候使用更简单的数据结构，有利于节省内存，提高性能。</p><p>这五种数据类型与底层数据结构对应关系图如下，左边是 Redis 3.0版本的，也就是《Redis 设计与实现》这本书讲解的版本，现在看还是有点过时了，右边是现在 Github 最新的 Redis 代码的。</p><p>可以看到，Redis 数据类型的底层数据结构随着版本的更新也有所不同，比如：</p><ul><li>在 Redis 3.0 版本中 List 对象的底层数据结构由「双向链表」或「压缩表列表」实现，但是在 3.2 版本之后，List 数据类型底层数据结构是由 quicklist 实现的；</li><li>在最新的 Redis 代码中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。</li></ul><p>Redis 五种数据类型的应用场景：</p><ul><li>String 类型的应用场景：缓存对象、常规计数、分布式锁、共享session信息等。</li><li>List 类型的应用场景：消息队列（有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）等。</li><li>Hash 类型：缓存对象、购物车等。</li><li>Set 类型：聚合计算（并集、交集、差集）场景，比如点赞、共同关注、抽奖活动等。</li><li>Zset 类型：排序场景，比如排行榜、电话和姓名排序等。</li></ul><p>Redis 后续版本又支持四种数据类型，它们的应用场景如下：</p><ul><li>BitMap（2.2 版新增）：二值状态统计的场景，比如签到、判断用户登陆状态、连续签到用户总数等；</li><li>HyperLogLog（2.8 版新增）：海量数据基数统计的场景，比如百万级网页 UV 计数等；</li><li>GEO（3.2 版新增）：存储地理位置信息的场景，比如滴滴叫车；</li><li>Stream（5.0 版新增）：消息队列，相比于基于 List 类型实现的消息队列，有这两个特有的特性：自动生成全局唯一消息ID，支持以消费组形式消费数据。</li></ul><p>针对 Redis 是否适合做消息队列，关键看你的业务场景：</p><ul><li>如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。</li><li>如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。</li></ul>',355)],l={},p=(0,n(6262).A)(l,[["render",function(s,i){return(0,e.uX)(),(0,e.CE)("div",null,a)}]]),d=JSON.parse('{"path":"/DataBase/Redis/RedisData.html","title":"Redis数据类型","lang":"zh-CN","frontmatter":{"date":"2024-08-30T00:00:00.000Z","category":["数据库"],"tag":["Redis"],"description":"Redis数据类型 Redis 常用的数据类型有哪些？ Redis 中比较常见的数据类型有下面这些： 5 种基础数据类型：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。 3 种特殊数据类型：HyperLogLog（基数统计）、Bitmap （位图）、Geospatial (地理位置)。 除了上面提到的...","head":[["meta",{"property":"og:url","content":"https://cutewr.github.io/DataBase/Redis/RedisData.html"}],["meta",{"property":"og:site_name","content":"首页"}],["meta",{"property":"og:title","content":"Redis数据类型"}],["meta",{"property":"og:description","content":"Redis数据类型 Redis 常用的数据类型有哪些？ Redis 中比较常见的数据类型有下面这些： 5 种基础数据类型：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。 3 种特殊数据类型：HyperLogLog（基数统计）、Bitmap （位图）、Geospatial (地理位置)。 除了上面提到的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://prod-files-secure.s3.us-west-2.amazonaws.com/3e894961-3173-4702-91a3-da175d94f68d/50ebe537-6854-478d-a6fa-a64fe4b05c31/image-20240724183403638.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T00:18:55.000Z"}],["meta",{"property":"article:author","content":"Cutewr"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2024-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-31T00:18:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis数据类型\\",\\"image\\":[\\"https://prod-files-secure.s3.us-west-2.amazonaws.com/3e894961-3173-4702-91a3-da175d94f68d/50ebe537-6854-478d-a6fa-a64fe4b05c31/image-20240724183403638.png\\"],\\"datePublished\\":\\"2024-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-31T00:18:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cutewr\\",\\"url\\":\\"https://cutewr.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Redis 常用的数据类型有哪些？","slug":"redis-常用的数据类型有哪些","link":"#redis-常用的数据类型有哪些","children":[]},{"level":2,"title":"String（字符串）","slug":"string-字符串","link":"#string-字符串","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"底层实现","slug":"底层实现","link":"#底层实现","children":[]},{"level":3,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"List","slug":"list","link":"#list","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"底层实现","slug":"底层实现-1","link":"#底层实现-1","children":[]},{"level":3,"title":"常用命令","slug":"常用命令-1","link":"#常用命令-1","children":[]},{"level":3,"title":"应用场景","slug":"应用场景-1","link":"#应用场景-1","children":[]}]},{"level":2,"title":"Hash","slug":"hash","link":"#hash","children":[{"level":3,"title":"简介","slug":"简介-1","link":"#简介-1","children":[]},{"level":3,"title":"内部实现","slug":"内部实现","link":"#内部实现","children":[]},{"level":3,"title":"常用命令","slug":"常用命令-2","link":"#常用命令-2","children":[]},{"level":3,"title":"应用场景","slug":"应用场景-2","link":"#应用场景-2","children":[]}]},{"level":2,"title":"Set","slug":"set","link":"#set","children":[{"level":3,"title":"简介","slug":"简介-2","link":"#简介-2","children":[]},{"level":3,"title":"内部实现","slug":"内部实现-1","link":"#内部实现-1","children":[]},{"level":3,"title":"常用命令","slug":"常用命令-3","link":"#常用命令-3","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"ZSET","slug":"zset","link":"#zset","children":[{"level":3,"title":"简介","slug":"简介-3","link":"#简介-3","children":[]},{"level":3,"title":"内部实现","slug":"内部实现-2","link":"#内部实现-2","children":[]},{"level":3,"title":"常用命令","slug":"常用命令-4","link":"#常用命令-4","children":[]},{"level":3,"title":"应用场景","slug":"应用场景-3","link":"#应用场景-3","children":[]}]},{"level":2,"title":"BitMap","slug":"bitmap","link":"#bitmap","children":[{"level":3,"title":"简介","slug":"简介-4","link":"#简介-4","children":[]},{"level":3,"title":"内部实现","slug":"内部实现-3","link":"#内部实现-3","children":[]},{"level":3,"title":"常用命令","slug":"常用命令-5","link":"#常用命令-5","children":[]},{"level":3,"title":"应用场景","slug":"应用场景-4","link":"#应用场景-4","children":[]}]},{"level":2,"title":"HyperLogLog","slug":"hyperloglog","link":"#hyperloglog","children":[{"level":3,"title":"简介","slug":"简介-5","link":"#简介-5","children":[]},{"level":3,"title":"常见命令","slug":"常见命令","link":"#常见命令","children":[]},{"level":3,"title":"应用场景","slug":"应用场景-5","link":"#应用场景-5","children":[]}]},{"level":2,"title":"GEO","slug":"geo","link":"#geo","children":[{"level":3,"title":"内部实现","slug":"内部实现-4","link":"#内部实现-4","children":[]},{"level":3,"title":"常用命令","slug":"常用命令-6","link":"#常用命令-6","children":[]},{"level":3,"title":"应用场景","slug":"应用场景-6","link":"#应用场景-6","children":[]}]},{"level":2,"title":"Stream","slug":"stream","link":"#stream","children":[{"level":3,"title":"简介","slug":"简介-6","link":"#简介-6","children":[]},{"level":3,"title":"常见命令","slug":"常见命令-1","link":"#常见命令-1","children":[]},{"level":3,"title":"应用场景","slug":"应用场景-7","link":"#应用场景-7","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1725063535000,"updatedTime":1725063535000,"contributors":[{"name":"Cutewr","email":"2574303446@qq.com","commits":1}]},"readingTime":{"minutes":43.14,"words":12943},"filePathRelative":"DataBase/Redis/RedisData.md","localizedDate":"2024年8月30日","excerpt":"\\n<h2><strong>Redis 常用的数据类型有哪些？</strong></h2>\\n<p>Redis 中比较常见的数据类型有下面这些：</p>\\n<ul>\\n<li><strong>5 种基础数据类型</strong>：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</li>\\n<li><strong>3 种特殊数据类型</strong>：HyperLogLog（基数统计）、Bitmap （位图）、Geospatial (地理位置)。</li>\\n</ul>\\n<p>除了上面提到的之外，还有一些其他的比如 Bloom filter（布隆过滤器）、Bitfield（位域）。</p>","autoDesc":true}')}}]);